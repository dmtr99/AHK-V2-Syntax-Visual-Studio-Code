{
    "AhkTemplate": {
        "prefix": "#TEMPLATE",
        "body": [
            "#SingleInstance, Force",
            "SendMode Input",
            "SetWorkingDir, %A_ScriptDir%",
            ""
        ],
    },
    "#ClipboardTimeout": {
        "prefix": "#ClipboardTimeout",
        "body": "#ClipboardTimeout ${1:Milliseconds}",
        "description": "Changes how long the script keeps trying to access the clipboard when the first attempt fails."
    },
    "#ErrorStdOut": {
        "prefix": "#ErrorStdOut",
        "body": "#ErrorStdOut ${1:Encoding}",
        "description": "Sends any syntax error that prevents a script from launching to stderr rather than displaying a dialog."
    },
    "#HotIf": {
        "prefix": "#HotIf",
        "body": "#HotIf ${1:Expression}",
        "description": "Creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on any condition (an expression)."
    },
    "#HotIfTimeout": {
        "prefix": "#HotIfTimeout",
        "body": "#HotIfTimeout ${1:Timeout}",
        "description": "Sets the maximum time that may be spent evaluating a single #HotIf expression."
    },
    "#Hotstring": {
        "prefix": "#Hotstring",
        "body": "#Hotstring ${1:NewOptions}",
        "description": "Changes hotstring options or ending characters."
    },
    "#Include": {
        "prefix": "#Include",
        "body": "#Include ${1:FileOrDirName}",
        "description": "Causes the script to behave as though the specified file\"s contents are present at this exact position.\n#Include ensures that FileName is included only once, even if multiple inclusions are encountered for it"
    },
    "#IncludeAgain": {
        "prefix": "#IncludeAgain",
        "body": "#IncludeAgain ${1:FileOrDirName}",
        "description": "Causes the script to behave as though the specified file\"s contents are present at this exact position.\n#IncludeAgain allows multiple inclusions of the same file, while being the same as #Include in all other respects."
    },
    "#InputLevel": {
        "prefix": "#InputLevel",
        "body": "#InputLevel ${1:[Level]}",
        "description": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings. [Level] - An integer between 0 and 100. If omitted, it defaults to 0."
    },
    "#MaxThreads": {
        "prefix": "#MaxThreads",
        "body": "#MaxThreads ${1:Value}",
        "description": "Sets the maximum number of simultaneous threads."
    },
    "#MaxThreadsBuffer": {
        "prefix": "#MaxThreadsBuffer",
        "body": "#MaxThreadsBuffer ${1|true,false|}",
        "description": "Causes some or all hotkeys to buffer rather than ignore keypresses when their #MaxThreadsPerHotkey limit has been reached."
    },
    "#MaxThreadsPerHotkey": {
        "prefix": "#MaxThreadsPerHotkey",
        "body": "#MaxThreadsPerHotkey ${1:Value}",
        "description": "Sets the maximum number of simultaneous threads per hotkey or hotstring."
    },
    "#NoTrayIcon": {
        "prefix": "#NoTrayIcon",
        "body": "#NoTrayIcon",
        "description": "Disables the showing of a tray icon."
    },
    "Persistent": {
        "prefix": "Persistent",
        "body": "Persistent ${1|\u200B,true,false|}",
        "description": "Prevents the script from exiting automatically when its last thread completes, allowing it to stay running in an idle state."
    },
    "#SingleInstance": {
        "prefix": "#SingleInstance",
        "body": "#SingleInstance ${1|force,ignore,prompt,off|}",
        "description": "Determines whether a script is allowed to run again when it is already running."
    },
    "#UseHook": {
        "prefix": "#UseHook",
        "body": "#UseHook ${1|\u200B,On,Off|}",
        "description": "Forces the use of the hook to implement all or some keyboard hotkeys."
    },
    "#Warn": {
        "prefix": "#Warn",
        "body": "#Warn ${1:[WarningType}, ${2:WarningMode]}",
        "description": "Enables or disables warnings for specific conditions which may indicate an error, such as a typo or missing \"global\" declaration."
    },
    "#WinActivateForce": {
        "prefix": "#WinActivateForce",
        "body": "#WinActivateForce",
        "description": "Skips the gentle method of activating a window and goes straight to the forceful method."
    },
    "BlockInput()": {
        "prefix": "BlockInput(Mode)",
        "body": "BlockInput(${1|true,false,\"Send\",\"Mouse\",\"SendAndMouse\",\"Default\",\"MouseMove\",\"MouseMoveOff\"|})",
        "description": "Disables or enables the user\'s ability to interact with the computer via keyboard and mouse."
    },
    "Break": {
        "prefix": "Break",
        "body": "Break",
        "description": "Exits (terminates) any type of loop statement."
    },
    "Catch": {
        "prefix": "Catch",
        "body": [
			"Catch ${1:[ErrorClass]} {",
			"\t$2",
			"}",
			"$0"
		],
        "description": "Specifies the code to execute if an exception is raised during execution of a try statement."
    },
    "ClipboardAll()": {
        "prefix": "ClipboardAll()",
        "body": "ClipboardAll()",
        "description": "Waits until the clipboard contains data."
    },
    "ClipboardAll([Data, Size])": {
        "prefix": "ClipboardAll([Data, Size])",
        "body": "ClipboardAll(${1:Data}, ${2:Size]})",
        "description": "Waits until the clipboard contains data."
    },
    "ClipWait()": {
        "prefix": "ClipWait()",
        "body": "ClipWait()",
        "description": "Waits until the clipboard contains data."
    },
    "ClipWait([Timeout, WaitForAnyData])": {
        "prefix": "ClipWait([Timeout, WaitForAnyData])",
        "body": "ClipWait(${1:[Timeout}, ${2:WaitForAnyData]})",
        "description": "Waits until the clipboard contains data."
    },
    "Continue": {
        "prefix": "Continue",
        "body": "Continue",
        "description": "Skips the rest of a loop statement\"s current iteration and begins a new one."
    },
    "ControlAddItem()": {
        "prefix": "ControlAddItem(String, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlAddItem(${1:[String}, ${2:[Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Adds the specified string as a new entry at the bottom of a ListBox or ComboBox."
    },
    "ControlChooseIndex()": {
        "prefix": "ControlChooseIndex(N, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlChooseIndex(${1:[N}, ${2:[Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Sets the selection in a ListBox, ComboBox or Tab control to be the specified entry or tab number."
    },
    "ControlChooseString()": {
        "prefix": "ControlChooseString(String, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlChooseString(${1:[String}, ${2:[Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Sets the selection in a ListBox or ComboBox to be the first entry whose leading part matches the specified string."
    },
    "ControlClick()": {
        "prefix": "ControlClick([Control-or-Pos, WinTitle, WinText, WhichButton, ClickCount, Options, ExcludeTitle, ExcludeText])",
        "body": "ControlClick(${1:[Control-or-Pos}, ${2:WinTitle}, ${3:WinText}, ${4:WhichButton}, ${5:ClickCount}, ${6:Options}, ${7:ExcludeTitle}, ${8:ExcludeText]})",
        "description": "Sends a mouse button or mouse wheel event to a control."
    },
    "ControlDeleteItem()": {
        "prefix": "ControlDeleteItem(N, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlDeleteItem(${1:[N}, ${2:[Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Deletes the specified entry number from a ListBox or ComboBox."
    },
    "ControlFindItem()": {
        "prefix": "ControlFindItem(String, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlFindItem(${1:[String}, ${2:[Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Returns the entry number of a ListBox or ComboBox that is a complete match for the specified string."
    },
    "ControlFocus()": {
        "prefix": "ControlFocus(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlFocus(${1:[Control}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Sets input focus to a given control on a window."
    },
	"ControlGetChecked()": {
		"prefix": "ControlGetChecked(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetChecked(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns a non-zero value if the checkbox or radio button is checked."
	},
	"ControlGetChoice()": {
		"prefix": "ControlGetChoice(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetChoice(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns the name of the currently selected entry in a ListBox or ComboBox."
	},
	"ControlGetIndex()": {
		"prefix": "ControlGetIndex(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetIndex(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns the index of the currently selected entry or tab in a ListBox, ComboBox or Tab control."
	},
	"ControlGetClassNN()": {
		"prefix": "ControlGetClassNN(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetClassNN(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns the ClassNN (class name and sequence number) of the specified control."
	},
	"ControlGetFocus()": {
		"prefix": "ControlGetFocus([WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetFocus(${1:[WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
		"description": "Retrieves which control of the target window has input focus, if any."
	},
	"ControlGetEnabled()": {
		"prefix": "ControlGetEnabled(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetEnabled(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns a non-zero value if the specified control is enabled."
	},
	"ControlGetStyle()": {
		"prefix": "ControlGetStyle(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetStyle(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns an integer representing the style or extended style of the specified control."
	},
	"ControlGetExStyle()": {
		"prefix": "ControlGetExStyle(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetExStyle(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns an integer representing the style or extended style of the specified control."
	},
	"ControlGetHwnd()": {
		"prefix": "ControlGetHwnd(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetHwnd(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns the unique ID number of the specified control."
	},
	"ControlGetItems()": {
		"prefix": "ControlGetItems(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetItems(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
		"description": "Returns an array of items/rows from a ListBox, ComboBox, or DropDownList."
	},
	"ControlGetText()": {
		"prefix": "ControlGetText(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "ControlGetText(${1:OutputVar [}, ${2:Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
		"description": "Retrieves text from a control."
	},
    "ControlGetPos": {
        "prefix": "ControlGetPos([&X, &Y, &Width, &Height, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlGetPos(${1:[&X}, ${2:&Y}, ${3:&Width}, ${4:&Height}, ${5:Control}, ${6:WinTitle}, ${7:WinText}, ${8:ExcludeTitle})",
        "description": "Retrieves the position and size of a control."
    },
    "ControlGetVisible()": {
        "prefix": "ControlGetVisible(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlGetVisible(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Returns a non-zero value if the specified control is visible."
    },
    "ControlMove()": {
        "prefix": "ControlMove([X, Y, Width, Height, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlMove(${1:[Control}, ${2:X}, ${3:Y}, ${4:Width}, ${5:Height}, ${6:WinTitle}, ${7:WinText}, ${8:ExcludeTitle]})",
        "description": "Moves or resizes a control."
    },
    "ControlSend()": {
        "prefix": "ControlSend(Keys [, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlSend(${1:[Keys}, ${2:Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Sends simulated keystrokes to a window or control."
    },
    "ControlSendText()": {
        "prefix": "ControlSendText(Keys [, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlSendText(${1:[Keys}, ${2:Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Sends raw simulated keystrokes to a window or control."
    },
    "ControlSetChecked()": {
        "prefix": "ControlSetChecked(Value, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlSetChecked(${1|true,false,-1|}, ${2:Control [}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Changes the text of a control."
    },
	"ControlSetText()": {
        "prefix": "ControlSetText(NewText, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlSetText(${1:NewText}, ${2:Control [}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Changes the text of a control."
    },
    "ControlShow()": {
        "prefix": "ControlShow(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlShow(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Shows the specified control if it was previously hidden."
    },
    "ControlShowDropDown()": {
        "prefix": "ControlShowDropDown(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ControlShowDropDown(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Shows the drop-down list of a ComboBox control."
    },
    "EditGetCurrentCol()": {
        "prefix": "EditGetCurrentCol(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditGetCurrentCol(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Shows the drop-down list of a ComboBox control."
    },
    "EditGetCurrentLine()": {
        "prefix": "EditGetCurrentLine(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditGetCurrentLine(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Returns the line number in an Edit control where the caret (text insert point) resides."
    },
    "EditGetLine()": {
        "prefix": "EditGetLine(N [, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditGetLine(${1:N[}, ${2:Control}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Returns the text of the specified line in an Edit control."
    },
    "EditGetLineCount()": {
        "prefix": "EditGetLineCount(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditGetLineCount(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Returns the number of lines in an Edit control."
    },
    "EditGetSelectedText()": {
        "prefix": "EditGetSelectedText(Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditGetSelectedText(${1:Control[}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Returns the selected text in an Edit control."
    },
    "EditPaste()": {
        "prefix": "EditPaste(String, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "EditPaste(${1:String}, ${2:Control [}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Pastes the specified string at the caret (text insertion point) in an Edit control."
    },
    "ListViewGetContent()": {
        "prefix": "ListViewGetContent(Options, Control [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "ListViewGetContent(${1|Options,\u200B,\"Selected\",\"Focused\",\"Col4\",\"Count\",\"Count Selected\",\"Count Focused\",\"Count Col\"|}, ${2:Control [}, ${3:WinTitle}, ${4:WinText}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Returns a list of items/rows from a ListView."
    },
    "CoordMode()": {
        "prefix": "CoordMode(TargetType [, RelativeTo])",
        "body": "CoordMode(${1|\"ToolTip\",\"Pixel\",\"Mouse\",\"Caret\",\"Menu\"|}, ${2|\u200B,\"Screen\",\"Relative\",\"Client\"|})",
        "description": "Sets coordinate mode for various commands to be relative to either the active window or the screen."
    },
    "Critical()": {
        "prefix": "Critical(OnOffNumeric)",
        "body": "Critical(${1|OnOffNumeric,\u200b,\"On\",\"Off\"|})",
        "description": "Prevents the current thread from being interrupted by other threads, or enables it to be interrupted."
    },
    "DateAdd": {
        "prefix": "DateAdd(DateTime, Time, TimeUnits)",
        "body": "DateAdd(${1:DateTime}, ${2:Time}, ${2:TimeUnits})",
        "description": "Adds or subtracts time from a date-time value."
    },
    "DateDiff": {
        "prefix": "DateDiff(DateTime1, DateTime2, TimeUnits)",
        "body": "DateDiff(${1:DateTime1}, ${2:DateTime2}, ${2:TimeUnits})",
        "description": "Compares two date-time values and returns the difference."
    },
    "DetectHiddenText": {
        "prefix": "DetectHiddenText(Mode)",
        "body": "DetectHiddenText(${1|Mode,\u200B,true,false|})",
        "description": "Determines whether invisible text in a window is \"seen\" for the purpose of finding the window. This affects commands such as IfWinExist and WinActivate."
    },
    "DetectHiddenWindows": {
        "prefix": "DetectHiddenWindows(Mode)",
        "body": "DetectHiddenWindows(${1|Mode,\u200B,true,false|})",
        "description": "Determines whether invisible windows are \"seen\" by the script."
    },
    "DirCopy": {
        "prefix": "DirCopy",
        "body": "DirCopy(${1:Source}, ${2:Dest [}, ${3:Overwrite]})",
        "description": "Copies a folder along with all its sub-folders and files (similar to xcopy)."
    },
    "DirDelete": {
        "prefix": "DirDelete",
        "body": "DirDelete(${1:DirName [}, ${2:Recurse]})",
        "description": "Deletes a folder."
    },
    "DirMove": {
        "prefix": "DirMove",
        "body": "DirMove(${1:Source}, ${2:Dest [}, ${3:Flag]})",
        "description": "Moves a folder along with all its sub-folders and files. It can also rename a folder."
    },
    "DirSelect": {
        "prefix": "DirSelect",
        "body": "DirSelect(${1:[StartingFolder}, ${2:Options}, ${3:Prompt})",
        "description": "Displays a standard dialog that allows the user to select a folder."
    },
    "Download": {
        "prefix": "Download(URL, Filename)",
        "body": "Download(${1:URL}, ${2:Filename})",
        "description": "Downloads a file from the Internet."
    },
    "DriveEject": {
        "prefix": "DriveEject({[Drive]})",
        "body": "DriveEject(${1:[Drive]})",
        "description": "Ejects the tray of the specified CD/DVD drive, or ejects a removable drive."
    },
	"DriveRetract": {
        "prefix": "DriveRetract({[Drive]})",
        "body": "DriveRetract(${1:[Drive]})",
        "description": "Retracts the tray of the specified CD/DVD drive, or ejects a removable drive."
    },
	"DriveLock": {
        "prefix": "DriveLock({[Drive]})",
        "body": "DriveLock(${1:[Drive]})",
        "description": "Prevents the eject feature of the specified drive from working."
    },
	"DriveUnlock": {
        "prefix": "DriveUnlock({[Drive]})",
        "body": "DriveUnlock(${1:[Drive]})",
        "description": "Restores the eject feature of the specified drive."
    },
    "DriveGetCapacity": {
        "prefix": "DriveGetCapacity(Path)",
        "body": "DriveGetCapacity(${1:Path})",
        "description": "Returns the total capacity of the drive which contains the specified path, in megabytes."
    },
    "DriveGetSpaceFree": {
        "prefix": "DriveGetSpaceFree(Path)",
        "body": "DriveGetSpaceFree(${1:Path})",
        "description": "Returns the free disk space of the drive which contains the specified path, in megabytes."
    },
    "DriveGetFileSystem": {
        "prefix": "DriveGetFileSystem(Drive)",
        "body": "DriveGetFileSystem(${1:Drive})",
        "description": "Returns the type of the specified drive\"s file system."
    },
    "DriveGetLabel": {
        "prefix": "DriveGetLabel(Drive)",
        "body": "DriveGetLabel(${1:Drive})",
        "description": "Returns the volume label of the specified drive."
    },
    "DriveGetList": {
        "prefix": "DriveGetList(Type)",
        "body": "DriveGetList(${1:Type})",
        "description": "Returns a string of letters, one character for each drive letter in the system."
    },
    "DriveGetSerial": {
        "prefix": "DriveGetSerial(Drive)",
        "body": "DriveGetSerial(${1:Drive})",
        "description": "Returns the volume serial number of the specified drive."
    },
    "DriveGetStatus": {
        "prefix": "DriveGetStatus(Path)",
        "body": "DriveGetStatus(${1:Path})",
        "description": "Returns the status of the drive which contains the specified path."
    },
    "DriveGetStatusCD": {
        "prefix": "DriveGetStatusCD([Drive])",
        "body": "DriveGetStatusCD(${1:[Drive]})",
        "description": "Returns the media status of the specified CD/DVD drive."
    },
    "DriveGetType": {
        "prefix": "DriveGetType([Path])",
        "body": "DriveGetType(${1:[Path]})",
        "description": "Returns the type of the drive which contains the specified path."
    },
    "Edit": {
        "prefix": "Edit",
        "body": "Edit",
        "description": "Opens the current script for editing in the associated editor."
    },
    "Else": {
        "prefix": "Else",
        "body": "Else",
        "description": "Specifies one or more statements to execute if an If statement evaluates to false."
    },
    "EnvGet": {
        "prefix": "EnvGet(EnvVarName)",
        "body": "EnvGet(${1:EnvVarName})",
        "description": "Retrieves an environment variable."
    },
    "EnvSet": {
        "prefix": "EnvSet(EnvVar, Value)",
        "body": "EnvSet(${1:EnvVar}, ${2:Value})",
        "description": "Writes a value to a variable contained in the environment."
    },
    "Exit": {
        "prefix": "Exit",
        "body": "Exit ${1:[ ExitCode]}",
        "description": "Exits the current thread or (if the script is not persistent and contains no hotkeys) the entire script."
    },
    "ExitApp": {
        "prefix": "ExitApp",
        "body": "ExitApp ${1|ExitCode,\u200b|}",
        "description": "Terminates the script unconditionally."
    },
    "FileAppend": {
        "prefix": "FileAppend(Text [, Filename, Option])",
        "body": "FileAppend(${1:Text}, ${2:Filename}, ${3:Options})",
        "description": "Writes text to the end of a file (first creating the file, if necessary)."
    },
    "FileCopy": {
        "prefix": "FileCopy(SourcePattern, DestPattern [, Overwrite])",
        "body": "FileCopy(${1:SourcePattern}, ${2:DestPattern}, ${3|Overwrite,\u200B,true,false|})",
        "description": "Copies one or more files."
    },
    "FileCreateShortcut": {
        "prefix": "FileCreateShortcut(Target, LinkFile , WorkingDir, Args, Description, IconFile, ShortcutKey, IconNumber, RunState)",
        "body": "FileCreateShortcut(${1:Target}, ${2:\"C:\\My Shortcut.lnk\"}, ${3:WorkingDir}, ${4:Args}, ${5:Description}, ${6:IconFile}, ${7:ShortcutKey}, ${8:IconNumber}, ${9:RunState})",
        "description": "Creates a shortcut (.lnk) file."
    },
    "FileDelete": {
        "prefix": "FileDelete(FilePattern)",
        "body": "FileDelete(${1:FilePattern})",
        "description": "Deletes one or more files."
    },
    "FileEncoding": {
        "prefix": "FileEncoding([Encoding])",
        "body": "FileEncoding(${1|Encoding,\u200b,\"UTF-8\",\"UTF-8-RAW\",\"UTF-16\",\"UTF-16-RAW\",\"CPnnn\"|})",
        "description": "Sets the default encoding for FileRead, FileReadLine, Loop Read, FileAppend, and FileOpen()."
    },
    "FileGetAttrib()": {
        "prefix": "FileGetAttrib(Filename)",
        "body": "FileGetAttrib(${1:Filename})",
        "description": "Reports whether a file or folder is read-only, hidden, etc."
    },
    "FileGetShortcut()": {
        "prefix": "FileGetShortcut(LinkFile [, OutTarget, OutDir, OutArgs, OutDescription, OutIcon, OutIconNum, OutRunState])",
        "body": "FileGetShortcut(${1:LinkFile [}, ${2:OutTarget}, ${3:OutDir}, ${4:OutArgs}, ${5:OutDescription}, ${6:OutIcon}, ${7:OutIconNum}, ${8:OutRunState]})",
        "description": "Retrieves information about a shortcut (.lnk) file, such as its target file."
    },
    "FileGetSize()": {
        "prefix": "FileGetSize([Filename, Units]))",
        "body": "FileGetSize(${1:Filename}, ${2:Units]})",
        "description": "Retrieves the size of a file."
    },
    "FileGetTime()": {
        "prefix": "FileGetTime([Filename, WhichTime])",
        "body": "FileGetTime(${1:Filename}, ${2:WhichTime})",
        "description": "Retrieves the datetime stamp of a file or folder."
    },
    "FileGetVersion()": {
        "prefix": "FileGetVersion([Filename])",
        "body": "FileGetVersion(${1:[Filename]})",
        "description": "Retrieves the version of a file."
    },
    "FileInstall()": {
        "prefix": "FileInstall(Source, Dest [, Overwrite])",
        "body": "FileInstall(${1:Source}, ${2:Dest [}, ${3|Flag,\u200B,1,0|})",
        "description": "Includes the specified file inside the compiled version of the script.\r\n Flag,(1 = overwrite)"
    },
    "FileMove()": {
        "prefix": "FileMove(SourcePattern, DestPattern [, Overwrite])",
        "body": "FileMove(${1:Source}, ${2:Dest [}, ${3|Flag,\u200B,1,0|})",
        "description": "Moves or renames one or more files.\r\n Flag,(1 = overwrite)"
    },
    "FileOpen": {
        "prefix": "FileOpen((Filename, Flags [, Encoding])",
        "body": "FileOpen(${1:Filename}, ${2:Flags[}, ${3|Encoding,\u200B|})",
        "description": "Opens a file to read specific content from it and/or to write new content into it."
    },
    "FileRead": {
        "prefix": "FileRead(Filename [, Options])",
        "body": "FileRead(${1:Filename}, ${2|Options,\u200B|})",
        "description": "Reads a file\"s contents into a variable."
    },
    "FileRecycle": {
        "prefix": "FileRecycle(FilePattern)",
        "body": "FileRecycle(${1:FilePattern})",
        "description": "Sends a file or directory to the recycle bin if possible, or permanently deletes it."
    },
    "FileRecycleEmpty": {
        "prefix": "FileRecycleEmpty(DriveLetter)",
        "body": "FileRecycleEmpty(${1:[DriveLetter]})",
        "description": "Empties the recycle bin."
    },
    "FileSelect": {
        "prefix": "FileSelect(Options, RootDir\\Filename, Title, Filter)",
        "body": "FileSelect(${1:[Options}, ${2:RootDir[\\Filename]}, ${3:Title}, ${4:Filter]})",
        "description": "Displays a standard dialog that allows the user to open or save file(s)."
    },
    "FileSetAttrib": {
        "prefix": "FileSetAttrib(Attributes [, FilePattern, Mode])",
        "body": "FileSetAttrib(${1|Attributes,,\u200B,\"R\",\"A\",\"S\",\"H\",\"N\",\"O\",\"T\"|) }, ${2:FilePattern}, ${3|Recurse,\u200B,\"D\",\"F\",\"R\"|})",
        "description": "Changes the attributes of one or more files or folders. Wildcards are supported."
    },
    "FileSetTime": {
        "prefix": "FileSetTime([YYYYMMDDHH24MISS, FilePattern, WhichTime, Mode])",
        "body": "FileSetTime(${1:YYYYMMDDHH24MISS}, ${2:FilePattern}, ${3|WhichTime,\u200B,\"M\",\"C\",\"A\"|}, ${4|Mode,\u200B,\"D\",\"F\",\"R\"|})",
        "description": "Changes the datetime stamp of one or more files or folders. Wildcards are supported."
    },
    "Finally": {
        "prefix": "Finally",
        "body": "Finally ${1:Statement}",
        "description": "Ensures that one or more statements (commands or expressions) are always executed after the execution of a try statement."
    },
    "For": {
        "prefix": "For Key [, Value] in MapObject/ArrayObj",
        "body": "For ${1:Key}, ${2:[Value]} in ${3:Expression}",
        "description": "Repeats a series of commands once for each key-value pair in an object."
    },
    "FormatTime": {
        "prefix": "FormatTime([YYYYMMDDHH24MISS, Format])",
        "body": "FormatTime(${1:YYYYMMDDHH24MISS}, ${2|Format,\u200B,\"Time\",\"ShortDate\",\"LongDate\",\"YearMonth\",\"YDay\",\"YDay0\",\"WDay\",\"YWeek\",\"d\",\"dd\",\"M\",\"MM\",\"yyyy\",\"HH\",\"mm\",\"ss\"|})",
        "description": "Transforms a YYYYMMDDHH24MISS timestamp into the specified date/time format."
    },
    "GetKeyState": {
        "prefix": "GetKeyState(KeyName [, Mode])",
        "body": "GetKeyState(${1:KeyName}, ${2|\u200B,\"P\",\"T\"|})",
        "description": "Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status."
    },
    "Goto()": {
        "prefix": "Goto(Label)",
        "body": "Goto(\"${1:Label}\")",
        "description": "Jumps to the specified label and continues execution."
    },
    "GroupActivate()": {
        "prefix": "GroupActivate(GroupName [, Mode])",
        "body": "GroupActivate(${1:GroupName [}, ${2|Mode,\u200B,\"R\"|})",
        "description": "Activates the next window in a window group that was defined with GroupAdd."
    },
    "GroupAdd()": {
        "prefix": "GroupAdd(GroupName [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "GroupAdd(${1:GroupName}, ${2:WinTitle [}, ${3:WinText}, ${4:Label}, ${5:ExcludeTitle}, ${6:ExcludeText]})",
        "description": "Adds a window specification to a window group, creating the group if necessary."
    },
    "GroupClose()": {
        "prefix": "GroupClose(GroupName [, Mode])",
        "body": "GroupClose(${1:GroupName [}, ${2|Mode,\u200B,\"A\",\"R\"|})",
        "description": "Closes the active window if it was just activated by GroupActivate or GroupDeactivate. It then activates the next window in the series. It can also close all windows in a group."
    },
    "GroupDeactivate()": {
        "prefix": "GroupDeactivate(GroupName [, Mode])",
        "body": "GroupDeactivate(${1:GroupName [}, ${2|Mode,\u200B,\"R\"|})",
        "description": "Similar to GroupActivate except activates the next window not in the group."
    },
    "Gui()": {
        "prefix": "Gui()",
        "body": "Gui(${11|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Title}, ${3:EventObj})",
        "description": "Creates and returns a new Gui object."
    },
    "GuiObj.__New()": {
        "prefix": "GuiObj.__New()",
        "body": "Gu.__Newi(${1:[Options }, ${2:Title}, ${3:EventObj}})",
        "description": "Constructs a new Gui instance."
    },
	"GuiObj.Add()": {
        "prefix": "GuiObj.Add(ControlType , Options, Text)",
        "body": ".Add(${1|ControlType,\"Text\",\"Edit\",\"Updown\",\"Picture\",\"Button\",\"Checkbox\",\"Radio\",\"DropDownList\",\"ComboBox\",\"ListBox\",\"ListView\",\"TreeView\",\"Link\",\"Hotkey\",\"DateTime\",\"MonthCal\",\"Slider\",\"Progress\",\"GroupBox\",\"Tab\",\"StatusBar\",\"ActiveX\",\"Custom\"|}, ${2|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${3:Text})",
        "description": [
			"Adds a control to the GUI window, and returns a GuiControl object."
		]
    },
	"GuiObj.AddEdit()": {
		"prefix": "GuiObj.AddEdit(Options, Text)",
		"body": ".AddEdit(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Limit\",\"Lowercase\",\"Multi\",\"Number\",\"Password\",\"Readonly\",\"Tn\",\"Uppercase\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\",\"WantCtrlA\",\"WantReturn\",\"WantTab\",\"-Wrap\"|}, ${2:Text})",
		"description": [
			"Adds a Edit control to the GUI window, and returns a GuiControl object."
		]
	},
	"GuiObj.AddButton()": {
        "prefix": "GuiObj.AddButton(Options, Text)",
        "body": ".AddButton(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Default\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"Adds a Button control to the GUI window, and returns a GuiControl object."
		]
    },
	"GuiObj.AddDropDownList()": {
        "prefix": "GuiObj.AddDropDownList(Options, Array)",
        "body": ".AddDropDownList(${1|Options,\u200B,\"vName\",\"ChooseN\",\"Sort\",\"Uppercase\",\"Lowercase\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"Adds a DropDownList control to the GUI window, and returns a GuiControl object.\r\n\t\"Choose\" Var : pre-select Var (can be number or string)\r\n\t\"Sort\" : Sort list alphabetically"
		]
    },
	"GuiObj.AddComboBox()": {
        "prefix": "GuiObj.AddComboBox(Options, Array)",
        "body": ".AddComboBox(${1|Options,\u200B,\"vName\",\"ChooseN\",\"Sort\",\"Limit\",\"Simple\",\"Uppercase\",\"Lowercase\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"Adds a ComboBox control to the GUI window, and returns a GuiControl object.\r\n\t\"Choose\" Var : pre-select Var (can be number or string)\r\n\t\"Limit\" : restrict the user's input to the visible width of the ComboBox's edit field\r\n\t\"Sort\" : Sort list alphabetically\r\n\t\"Simple\" : behave as though it is an Edit field with a ListBox beneath it\r\n Use GuiCtrl.Text to get the content\r\n Events: Change, Focus & LoseFocus"
		]
    },
	"GuiObj.AddText()": {
        "prefix": "GuiObj.AddText(Options, Text)",
        "body": ".AddText(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"Adds a Text control to the GUI window, and returns a GuiControl object.\r\n Events: Click & DoubleClick"
		]
    },
	"GuiObj.AddTreeView()": {
		"prefix": "GuiObj.AddTreeView(Options)",
		"body": ".AddTreeView(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\",\"Buttons\",\"-HScroll\",\"ImageList\",\"-Lines\",\"-ReadOnly\",\"WantF2\"|})",
		"description": [
			"Adds a TreeView control to the GUI window, and returns a GuiControl object."
		]
	},
	"GuiObj.AddUpDown()": {
        "prefix": "GuiObj.AddUpDown(Options, Text)",
        "body": ".AddUpDown(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Center\",\"Section\",\"Range\",\"Tabstop\",\"-Wrap\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\",\"Horz\"|}, ${2:Text})",
        "description": [
			"Adds a UpDown control to the GUI window, and returns a GuiControl object."
		]
    },
	"GuiObj.AddPicture()": {
        "prefix": "GuiObj.AddPicture(Options, FileName)",
        "body": ".AddPicture(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"Icon1\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2|FileName,\"HBITMAP:\" bitmap-handle,\"HICON:\" icon-handle|})",
        "description": [
			"Adds a Picture control to the GUI window, and returns a GuiControl object."
		]
    },
	"GuiObj.AddListView()": {
		"prefix": "GuiObj.AddListView(Options, Array)",
		"body": ".AddListView(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"h20 w100\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\",\"Checked\",\"Count\",\"Grid\",\"-Hdr\",\"-Multi\",\"NoSortHdr\",\"-ReadOnly\",\"Sort\",\"SortDesc\",\"-WantF2\",\"-LV0xStyles\"|}, ${2:Text})",
		"description": [
			"Adds a ListView control to the GUI window, and returns a GuiControl object."
		]
	},
	"GuiObj.AddCheckBox()": {
        "prefix": "GuiObj.AddCheckBox(Options, Text)",
        "body": ".AddCheckBox(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"Checked\",\"CheckedGray\",\"Checked0\",\"Checked1\",\"Checked-1\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"Adds a CheckBox control to the GUI window, and returns a GuiControl object.\r\n\tCheck3 : to enable a third \"indeterminate\" state that displays a gray checkmark or a square instead of a black checkmark.\r\n\tChecked or CheckedGray : checked or indeterminate."
		]
    },
	"GuiObj.AddRadioBox()": {
        "prefix": "GuiObj.AddRadioBox(Options, Text)",
        "body": ".AddRadioBox(${1|Options,\u200B,\"vName\",\"x+ y+\",\"r2\",\"Checked\",\"Checked0\",\"Checked1\",\"Checked-1\",\"AltSubmit\",\"cBlue\",\"Disabled\",\"Hidden\",\"Left\",\"Right\",\"Center\",\"Section\",\"Tabstop\",\"-Wrap\",\"VScroll\",\"HScroll\",\"BackgroundTrans\",\"BackgroundColor\",\"Border\",\"Theme\"|}, ${2:Text})",
        "description": [
			"A radio button is a small empty circle that can be checked (on) or unchecked (off).\r\n\tGroup : start a new group\r\n\tChecked or CheckedGray or CheckedN : checked or indeterminate."
		]
    },
	"GuiObj.Show()": {
        "prefix": "GuiObj.Show(Options)",
        "body": ".Show(${1|Options,\u200B,\"vName\",\"xn yn\",\"hn wn\",\"Center\",\"xCenter\",\"yCenter\",\"AutoSize\",\"Minimize\",\"Maximize\",\"Restore\",\"NoActivate\",\"NA\",\"Hide\"|})",
        "description": [
			"By default, this makes the window visible, unminimizes it (if necessary) and activates it.\n",
			"Wn Hn Xn Yn Center xCenter yCenter AutoSize Minimize Maximize Restore NoActivate NA Hide\n"
		]
    },
	"GuiObj.Submit()": {
        "prefix": "GuiObj.Submit(Hide := true)",
        "body": ".GuiObj(${1|Hide,\u200B,true,false|})",
        "description": [
			"Collects the values from named controls and composes them into an Object. Optionally hides the window.\n",
			"NamedCtrlContents := MyGui.Submit(Hide := true)"
		]
    },
	"GuiObj.Hide()": {
        "prefix": "GuiObj.Hide()",
        "body": ".Hide()",
        "description": [
			"Hides the window."
		]
    },
	"GuiObj.Destroy()": {
        "prefix": "GuiObj.Destroy()",
        "body": ".Destroy()",
        "description": [
			"Destroys the window."
		]
    },
	"GuiObj.SetFont()": {
        "prefix": "GuiObj.SetFont([Options, FontName])",
        "body": ".SetFont(${1|Options,\u200b,\"bold\",\"Italic\",\"strike\",\"underline\",\"norm\",\"cBlue\",\"s10\"|}, ${2|FontName,\u200b,\"Arial\",\"Calibri\",\"Consolas\",\"Times New Roman\"|})",
        "description": [
			"Sets the font typeface, size, style, and/or color for controls added to the window from this point onward."
		]
    },
	"GuiObj.BackColor": {
        "prefix": "GuiObj.BackColor",
        "body": ".BackColor",
        "description": [
			"Retrieves or sets the background color of the window."
		]
    },
	"GuiObj.MarginX": {
        "prefix": "GuiObj.MarginX",
        "body": ".MarginX",
        "description": [
			"Retrieves or sets the size of horizontal margins between sides and subsequently created controls."
		]
    },
	"GuiObj.MarginY": {
        "prefix": "GuiObj.MarginY",
        "body": ".MarginY",
        "description": [
			"Retrieves or sets the size of horizontal margins between sides and subsequently created controls."
		]
    },
	"GuiObj.Opt": {
        "prefix": "GuiObj.Opt(Options)",
        "body": ".Opt(${1|Options,\"AlwaysOnTop\",\"Border\",\"Caption \",\"Disabled\",\"-DPIScale\",\"LastFound\",\"MaximizeBox\",\"MinimizeBox \",\"+MinSize640x480\",\"+MaxSize640x480 \",\"+OwnDialogs\",\"+Owner\",\"Parent\",\"Resize\",\"-SysMenu\",\"-Theme\",\"ToolWindow\"|})",
        "description": [
			"Sets one or more options for the GUI window."
		]
    },
	"GuiObj.FocusedCtrl": {
        "prefix": "GuiObj.FocusedCtrl",
        "body": ".FocusedCtrl",
        "description": [
			"Retrieves the GuiControl object of the GUI's focused control."
		]
    },
	"GuiObj.MenuBar": {
        "prefix": "GuiObj.MenuBar",
        "body": ".MenuBar",
        "description": [
			"Retrieves or sets the window's menu bar."
		]
    },
	"GuiObj.Minimize()": {
        "prefix": "GuiObj.Minimize()",
        "body": ".Minimize()",
        "description": [
			"Unhides the window (if necessary) and minimizes it."
		]
    },
	"GuiObj.Maximize()": {
        "prefix": "GuiObj.Maximize()",
        "body": ".Maximize()",
        "description": [
			"Unhides the window (if necessary) and maximizes it."
		]
    },
	"GuiObj.Move()": {
        "prefix": "GuiObj.Move([X, Y, Width, Height])",
        "body": ".Move(${1:X}, ${2:Y}, ${3:Width}, ${2:Height}, )",
        "description": [
			"Moves and/or resizes the GUI window."
		]
    },
	"GuiObj.GetPos()": {
        "prefix": "GuiObj.GetPos([X, Y, Width, Height])",
        "body": ".GetPos(${1:&X}, ${2:&Y}, ${3:&Width}, ${4:&Height})",
        "description": [
			"Retrieves the position and size of the window or the guiControl."
		]
    },
	"GuiObj.GetClientPos()": {
        "prefix": "GuiObj.GetClientPos([X, Y, Width, Height])",
        "body": ".GetClientPos(${1:&X}, ${2:&Y}, ${3:&Width}, ${4:&Height})",
        "description": [
			"Retrieves the position and size of the window's client area."
		]
    },
	"GuiObj.Flash()": {
        "prefix": "GuiObj.Flash([Blink := true])",
        "body": ".Flash(${1|Blink,\u200b,true,false|})",
        "description": [
			"Blinks the window's button in the taskbar."
		]
    },
	"GuiObj.Hwnd": {
        "prefix": "GuiObj.Hwnd",
        "body": ".Hwnd",
        "description": [
			"Retrieves the window handle (HWND) of the GUI window."
		]
    },
	"GuiObj.Title": {
        "prefix": "GuiObj.Title",
        "body": ".Title",
        "description": [
			"Retrieves or sets the GUI's title."
		]
    },
	"GuiObj.Name": {
        "prefix": "GuiObj.Name",
        "body": ".Name",
        "description": [
			"Retrieves or sets a custom name for the GUI window."
		]
    },
	"GuiCtrl.Choose()": {
        "prefix": "GuiCtrl.Choose(Value)",
        "body": ".Choose(${1:Value})",
        "description": [
			"Sets the selection in a ListBox, DropDownList, ComboBox, or Tab"
		]
    },
	"GuiCtrl.UseTab()": {
        "prefix": "GuiCtrl.UseTab([Value, ExactMatch := false])",
        "body": ".UseTab(${1:Value})",
        "description": [
			"Value : Number or text of tab."
		]
    },
	"GuiCtrl.Add()": {
        "prefix": "GuiCtrl.Add(Array)",
        "body": ".Add(${1:Array})",
        "description": [
			"Appends list items to a ListBox, DropDownList or ComboBox, or tabs to a Tab control.\r\n\tUse GuiCtrl.Choose to select an item."
		]
    },
	"GuiCtrl.Delete()": {
        "prefix": "GuiCtrl.Delete([Value])",
        "body": ".Delete(${1:Value})",
        "description": [
			"Deletes the specified entry or all entries of a ListBox, DropDownList, ComboBox, or Tab control."
		]
    },
	"GuiCtrl.Value": {
        "prefix": "GuiCtrl.Value",
        "body": ".Value",
        "description": [
            "Picture:\r\n\tRetrievedValue is the picture's file name\r\n\tNewValue is the filename or handle.",
            "Text:\r\n\tText/caption of the Text control.",
            "Edit:\r\n\tCurrent content of the Edit control (without `r).",
            "Checkbox / radio:\r\n\t1 is checked, 0 is unchecked & -1 is gray checkmark.",
            "DateTime / MonthCal:\r\n\tDate-time stamp in YYYYMMDDHH24MISS format.",
            "UpDown / Slider / Progress:\r\n\tCurrent position. -- and ++ may be used",
            "Tab / DropDownList / ComboBox / ListBox:\r\n\tPosition of the selected item/tab, returns an array for a multi-select ListBox",
            "Hotkey:\r\n\tModifiers and key name."
		]
    },
	"GuiCtrl.Text": {
        "prefix": "GuiCtrl.Text",
        "body": ".Text",
        "description": [
			"Retrieves or sets the text/caption of the control.\r\n Control types: Button, Checkbox, Edit, GroupBox, Link, Radio, Text.\r\n For a multi-select ListBox, RetrievedText is an array."
		]
    },
	"GuiCtrl.Redraw()": {
        "prefix": "GuiCtrl.Redraw()",
        "body": ".Redraw()",
        "description": [
			"Deletes the specified entry or all entries of a ListBox, DropDownList, ComboBox, or Tab control."
		]
    },
	"GuiCtrl.Enabled": {
        "prefix": "GuiCtrl.Enabled",
        "body": ".Enabled",
        "description": [
			"Retrieves the current interaction state of the control, or enables or disables (grays out) it."
		]
    },
	"GuiCtrl.OnEvent()": {
        "prefix": "GuiCtrl.OnEvent(EventName, Callback [, AddRemove := 1])",
        "body": ".OnEvent(${1|EventName,\"Close\",\"ContextMenu\",\"DropFiles\",\"Escape\",\"Size\",\"Change\",\"DoubleClick\",\"ColClick\",\"ContextMenu\",\"Focus\",\"LoseFocus\",\"ItemCheck\",\"ItemEdit\",\"ItemExpand\",\"ItemFocus\",\"ItemSelect\"|}, ${2:Callback}, ${3:AddRemove})",
        "description": [
			"Registers a function or method to be called when the given event is raised by a GUI window or control."
		]
    },
    "Hotkey": {
        "prefix": "Hotkey",
        "body": "Hotkey(${1:KeyName}, ${2|Action,\u200b,\"On\",\"Off\",\"Toggle\",\"AltTab\"|}, ${3|Options,\u200b,\"On\",\"Off\",\"B\",\"B0\",\"Pn\",\"S\",\"S0\",\"Tn\",\"In\"|})",
        "description": "Creates, modifies, enables, or disables a hotkey while the script is running."
    },
    "If": {
        "prefix": "If",
        "body": "If (${1:expression})",
        "description": "Specifies one or more statements to execute if an expression evaluates to true."
    },
    "ImageSearch": {
        "prefix": "ImageSearch(&OutputVarX, &OutputVarY, X1, Y1, X2, Y2, ImageFile)",
        "body": "ImageSearch(${1:&OutputVarX}, ${2:&OutputVarY}, ${3:X1}, ${4:Y1}, ${5:X2}, ${6:Y2}, ${7:ImageFile})",
        "description": "Searches a region of the screen for an image."
    },
    "IniDelete": {
        "prefix": "IniDelete(Filename, Section [, Key])",
        "body": "IniDelete(${1:Filename}, ${2:Section}, ${3|Key,\u200B|})",
        "description": "Deletes a value from a standard format .ini file."
    },
    "IniRead": {
        "prefix": "IniRead(Filename, [Section, Key , Default])",
        "body": "IniRead(${1:Filename}, ${2:Section}, ${3:Key}, ${4|Default,\u200B|})",
        "description": "Reads a value, section or list of section names from a standard format .ini file."
    },
    "IniWrite": {
        "prefix": "IniWrite(Value, Filename, Section, [Key])",
        "body": "IniWrite(${1:Value}, ${2:Filename}, ${3:Section}, ${4:[Key]})",
        "description": "Writes a value or section to a standard format .ini file."
    },
    "InputHook": {
        "prefix": "InputHook([Options, EndKeys, MatchList])",
        "body": "InputHook(${1:[ Options}, ${2:EndKeys}, ${3:MatchList]})",
        "description": "Creates an object which can be used to collect or intercept keyboard input."
    },
    "InputBox": {
        "prefix": "InputBox([Prompt, Title, Options, Default])",
        "body": "InputBox(${1:Prompt}, ${2:Title}, ${3|Options,\u200B,\"Xn Yn\",\"Wn Hn\",\"Password\",\"Tn\"|}, ${4:Default})",
        "description": "Displays an input box to ask the user to enter a string."
    },
    "KeyHistory": {
        "prefix": "KeyHistory(MaxEvents)",
        "body": "KeyHistory(${1:MaxEvents})",
        "description": "Displays script info and a history of the most recent keystrokes and mouse clicks."
    },
    "KeyWait": {
        "prefix": "KeyWait(KeyName, Options)",
        "body": "KeyWait(${1:KeyName}, ${2|Options,\u200B,\"D\",\"L\",\"T\"|})",
        "description": "Waits for a key or mouse/joystick button to be released or pressed down."
    },
    "ListHotkeys": {
        "prefix": "ListHotkeys",
        "body": "ListHotkeys",
        "description": "Displays the hotkeys in use by the current script, whether their subroutines are currently running, and whether or not they use the keyboard or mouse hook."
    },
    "ListLines": {
        "prefix": "ListLines([Mode])",
        "body": "ListLines(${1|Mode,\u200B,true,false|})",
        "description": "Displays the script lines most recently executed."
    },
    "ListVars": {
        "prefix": "ListVars",
        "body": "ListVars",
        "description": "Displays the script\"s variables: their names and current contents."
    },
    "Loop": {
        "prefix": "Loop",
        "body": [
			"Loop ${1|Count,\u200B|} {",
			"\t$0",
			"}"
		],
        "description": "Performs a series of commands repeatedly: either the specified number of times or until break is encountered."
    },
    "Loop files": {
        "prefix": "Loop files FilePattern [, Mode]",
        "body": "Loop files, ${1:FilePattern [}, ${2|Mode,\u200B,\"D\",\"F\",\"R\"|}",
        "description": "Retrieves the specified files or folders, one at a time."
    },
    "Loop parse": {
        "prefix": "Loop parse, String [, Delimiters, OmitChars]",
        "body": "Loop parse, ${1:InputVar}, ${2|Delimiters,\"`n\",\",\",\"CSV\",A_Space|}, ${3|OmitChars,\u200B,\"`r\"|}",
        "description": "Retrieves substrings (fields) from a string, one at a time."
    },
    "Loop read": {
        "prefix": "Loop read, InputFile [, OutputFile]",
        "body": "Loop read, ${1:InputFile}, ${2|OutputFile,\u200B|}",
        "description": "Retrieves the lines in a text file, one at a time (performs better than FileReadLine)."
    },
    "Loop Reg": {
        "prefix": "Loop reg",
        "body": "Loop reg, ${1:KeyName [}, ${2|Mode,\u200B,\"K\",\"V\",\"R\"|}",
        "description": "Retrieves the contents of the specified registry subkey, one item at a time."
    },
    "Menu": {
        "prefix": "Menu()",
        "body": "Menu()",
        "description": "Creates a new Menu object."
    },
	"MenuObj.Add()": {
        "prefix": "MenuObj.Add([MenuItemName, Function-or-Submenu, Options])",
        "body": "MenuObj.Add(${1:MenuItemName}, ${2:Function-or-Submenu}, ${3|Options,\u200b,\"Pn\",\"+Radio\",\"+Right\",\"+Break\",\"+BarBreak\"|})",
        "description": "Adds or modifies a menu item."
    },
	"MenuObj.Check()": {
        "prefix": "MenuObj.Check(MenuItemName)",
        "body": "MenuObj.Check(${1:MenuItemName})",
        "description": "Adds a visible checkmark in the menu next to MenuItemName (if there isn't one already)."
    },
	"MenuObj.ClickCount()": {
        "prefix": "MenuObj.ClickCount(MenuItemName)",
        "body": "MenuObj.ClickCount(${1:MenuItemName})",
        "description": "Retrieves or sets the number of clicks required to activate the tray menu's default item."
    },
	"MenuObj.Delete()": {
        "prefix": "MenuObj.Delete(MenuItemName)",
        "body": "MenuObj.Delete(${1:MenuItemName})",
        "description": "Deletes a menu item or all custom menu items."
    },
	"MenuObj.Default": {
        "prefix": "MenuObj.Default",
        "body": "MenuObj.Default",
        "description": "Retrieves or sets the default menu item."
    },
	"MenuObj.Disable()": {
        "prefix": "MenuObj.Disable(MenuItemName)",
        "body": "MenuObj.Disable(${1:MenuItemName})",
        "description": "Changes MenuItemName to a gray color to indicate that the user cannot select it."
    },
	"MenuObj.Enable()": {
        "prefix": "MenuObj.Enable(MenuItemName)",
        "body": "MenuObj.Enable(${1:MenuItemName})",
        "description": "Allows the user to once again select MenuItemName if it was previously disabled (grayed)."
    },
	"MenuObj.Insert()": {
        "prefix": "MenuObj.Insert(ItemToInsertBefore, NewItemName, Callback-or-Submenu, Options)",
        "body": "MenuObj.Insert(${1:MenuItemName}, ${2:NewItemName}, ${3:Callback-or-Submenu}, ${4|Options,\u200b,\"Pn\",\"+Radio\",\"+Right\",\"+Break\",\"+BarBreak\"|})",
        "description": "Inserts a new item before the specified item."
    },
	"MenuObj.Rename()": {
        "prefix": "MenuObj.Rename(MenuItemName, [NewName])",
        "body": "MenuObj.Rename(${1:MenuItemName}, ${2:NewItemName})",
        "description": "Renames MenuItemName to NewName."
    },
	"MenuObj.SetColor()": {
        "prefix": "MenuObj.Rename([ColorValue, Submenus := true])",
        "body": "MenuObj.Rename(${1|ColorValue,\u200B\",\"Default\",0xFFFFAA,\"Black\",\"SilverGray\",\"White\",\"Maroon\",\"Red\",\"Purple\",\"Fuchsia\",\"Green\",\"Lime\",\"Olive\",\"Yellow\",\"Navy\",\"Blue\",\"Teal\",\"Aqua\"|}, ${2:Submenus})",
        "description": "Changes the background color of the menu to ColorValue."
    },
	"MenuObj.SetIcon()": {
        "prefix": "MenuObj.SetIcon(MenuItemName, FileName [, IconNumber, IconWidth])",
        "body": "MenuObj.SetIcon(${1:MenuItemName}, ${2|FileName,\"HBITMAP:\" bitmap-handle,\"HICON:\" icon-handle|}, ${3:IconNumber}, ${4:IconWidth})",
        "description": "Sets the icon to be displayed next to MenuItemName."
    },
	"MenuObj.Show()": {
        "prefix": "MenuObj.Show(X, Y)",
        "body": "MenuObj.Show(${1:X}, ${2:Y})",
        "description": "Displays the menu, allowing the user to select an item with arrow keys, menu shortcuts (underlined letters), or the mouse."
    },
	"MenuObj.ToggleCheck()": {
        "prefix": "MenuObj.ToggleCheck(MenuItemName)",
        "body": "MenuObj.ToggleCheck(${1:MenuItemName})",
        "description": "Adds a checkmark if there wasn't one; otherwise, removes it."
    },
	"MenuObj.ToggleEnable()": {
        "prefix": "MenuObj.ToggleEnable(MenuItemName)",
        "body": "MenuObj.ToggleEnable(${1:MenuItemName})",
        "description": "Disables MenuItemName if it was previously enabled; otherwise, enables it."
    },
	"MenuObj.Uncheck()": {
        "prefix": "MenuObj.Uncheck(MenuItemName)",
        "body": "MenuObj.Uncheck(${1:MenuItemName})",
        "description": "Removes the checkmark (if there is one) from a menu item."
    },
	"MenuObj.AddStandard()": {
        "prefix": "MenuObj.AddStandard()",
        "body": "MenuObj.AddStandard()",
        "description": "Adds the standard tray menu items."
    },
	"MenuObj.Handle": {
        "prefix": "MenuObj.Handle",
        "body": "MenuObj.Handle",
        "description": "Returns a handle to a Win32 menu (a handle of type HMENU), constructing it if necessary."
    },
    "MenuBar()": {
        "prefix": "MenuBar()",
        "body": "MenuBar()",
        "description": "Creates a new MenuBar object."
    },
    "MenuSelect()": {
        "prefix": "MenuSelect(WinTitle, WinText, Menu [, SubMenu1, SubMenu2, SubMenu3, SubMenu4, SubMenu5, SubMenu6, ExcludeTitle, ExcludeText])",
        "body": "MenuSelect(${1:WinTitle}, ${2:WinText}, ${3:Menu [}, ${4:SubMenu1}, ${5:SubMenu2}, ${6:SubMenu3}, ${7:SubMenu4}, ${8:SubMenu5}, ${9:SubMenu6}, ${10:ExcludeTitle}, ${11:ExcludeText ]})",
        "description": "Invokes a menu item from the menu bar of the specified window."
    },
    "MouseClick": {
        "prefix": "MouseClick([WhichButton, X, Y, ClickCount, Speed, DownOrUp, Relative])",
        "body": "MouseClick(${1:WhichButton [}, ${2|X,\u200B|}, ${3|Y,\u200B|}, ${4|ClickCount,\u200B|}, ${5|Speed,\u200B|}, ${6|DownOrUp,\u200B,\"D\",\"U\"|}, ${7|Relative,\u200B,\"R\"|})",
        "description": "Clicks or holds down a mouse button, or turns the mouse wheel. NOTE: The Click command is generally more flexible and easier to use."
    },
    "MouseClickDrag": {
        "prefix": "MouseClickDrag(WhichButton, X1, Y1, X2, Y2 [, Speed, Relative])",
        "body": "MouseClickDrag(${1:WhichButton [}, ${2|X,\u200B|}, ${3|Y,\u200B|}, ${4|ClickCount,\u200B|}, ${5|Speed,\u200B|}, ${6|DownOrUp,\u200B,\"D\",\"U\"|}, ${7|Relative,\u200B,\"R\"|})",
        "description": "Clicks and holds the specified mouse button, moves the mouse to the destination coordinates, then releases the button."
    },
    "MouseGetPos": {
        "prefix": "MouseGetPos([&OutputVarX, &OutputVarY, &OutputVarWin, &OutputVarControl, Flag])",
        "body": "MouseGetPos(${1:[ &OutputVarX}, ${2:&OutputVarY}, ${3:&OutputVarWin}, ${4:&OutputVarControl}, ${5:|\u200B,1,2,3|})",
        "description": "Retrieves the current position of the mouse cursor, and optionally which window and control it is hovering over."
    },
    "MouseMove": {
        "prefix": "MouseMove(X, Y [, Speed, Relative])",
        "body": "MouseMove(${1:X}, ${2:Y [}, ${3:Speed}, ${4:\"R\"]})",
        "description": "Moves the mouse cursor."
    },
    "MsgBox(Text)": {
        "prefix": "MsgBox(Text)",
        "body": "MsgBox(${1:Text})",
        "description": "Displays the specified text in a small window containing one or more buttons (such as Yes and No)."
    },
    "MsgBox([Text, Title, Options])": {
        "prefix": "MsgBox([Text, Title, Options])",
        "body": "MsgBox(${1:[Text}, ${2:Title}, ${3:Options]})",
        "description": "Displays the specified text in a small window containing one or more buttons (such as Yes and No)."
    },
    "OnExit": {
        "prefix": "OnExit(Function , AddRemove)",
        "body": "OnExit(${1:[ Function}, ${2|AddRemove,1,-1,0|})",
        "description": "Specifies a callback function or subroutine to run automatically when the script exits."
    },
    "OutputDebug": {
        "prefix": "OutputDebug(Text)",
        "body": "OutputDebug(${1:Text})",
        "description": "Sends a string to the debugger (if any) for display."
    },
    "Pause": {
        "prefix": "Pause(NewState)",
        "body": "Pause(${1|NewState,\u200B,true,false,-1|}, ${2:OperateOnUnderlyingThread?]})",
        "description": "Pauses the script\"s current thread."
    },
    "PixelGetColor": {
        "prefix": "PixelGetColor(X, Y [, Mode])",
        "body": "PixelGetColor(${1:X}, ${2:Y [}, ${3|Mode,\"Alt\",\"Slow\",\"Alt Slow\"|})",
        "description": "Retrieves the color of the pixel at the specified x,y coordinates."
    },
    "PixelSearch()": {
        "prefix": "PixelSearch(&OutputVarX, &OutputVarY, X1, Y1, X2, Y2, ColorID [, Variation])",
        "body": "PixelSearch(${1:&OutputVarX}, ${2:&OutputVarY}, ${3:X1}, ${4:Y1}, ${5:X2}, ${6:Y2}, ${7:ColorID [}, ${8:Variation]})",
        "description": "Searches a region of the screen for a pixel of the specified color."
    },
    "PostMessage()": {
        "prefix": "PostMessage(Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "PostMessage(${1:Msg [}, ${2:[wParam}, ${3:lParam}, ${4:Control}, ${5:WinTitle}, ${6:WinText}, ${7:ExcludeTitle}, ${8:ExcludeText]})",
        "description": "Sends a message to a window or control (SendMessage additionally waits for acknowledgement)."
    },
    "ProcessSetPriority()": {
        "prefix": "ProcessSetPriority(Level [, PIDOrName])",
        "body": "ProcessSetPriority(${1|Level,\"Low\",\"BelowNormal\",\"Normal\",\"AboveNormal\",\"High\",\"Realtime\"|}, ${2:[PIDOrName]})",
        "description": "Changes the priority level of the first matching process."
    },
    "ProcessWait()": {
        "prefix": "ProcessWait(PIDOrName [, Timeout])",
        "body": "ProcessWait(${1:PIDOrName}, ${2:[Timeout]})",
        "description": "Waits for the specified process to exist."
    },
    "ProcessExist()": {
        "prefix": "ProcessExist(PIDOrName)",
        "body": "ProcessExist(${1:PIDOrName})",
        "description": "Checks if the specified process exists."
    },
    "ProcessClose()": {
        "prefix": "ProcessClose(PIDOrName)",
        "body": "ProcessClose(${1:PIDOrName})",
        "description": "Forces the first matching process to close."
    },
    "ProcessWaitClose()": {
        "prefix": "ProcessWaitClose(PIDOrName [, Timeout])",
        "body": "ProcessWaitClose(${1:PIDOrName}, ${2:[Timeout]})",
        "description": "Waits for all matching processes to close."
    },
    "Random()": {
        "prefix": "Random([Min,Max])",
        "body": "Random(${2:Min}, ${3:Max})",
        "description": "Generates a pseudo-random number."
    },
    "RegDelete()": {
        "prefix": "RegDelete(KeyName, ValueName)",
        "body": "RegDelete(\"${1|KeyName,\u200b,HKEY_LOCAL_MACHINE,HKEY_USERS,HKEY_CURRENT_USER,HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG|}\", ${3:ValueName]})",
        "description": "Deletes a subkey or value from the registry."
    },
    "RegRead()": {
        "prefix": "RegRead([KeyName, ValueName, Default])",
        "body": "RegRead(\"${1|KeyName,\u200b,HKEY_LOCAL_MACHINE,HKEY_USERS,HKEY_CURRENT_USER,HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG|}\", ${2:ValueName]}, ${3:Default]})",
        "description": "Reads a value from the registry."
    },
    "RegWrite()": {
        "prefix": "RegWrite(Value, ValueType, KeyName [, ValueName])",
        "body": "RegWrite(${1:Value}, \"${2|ValueType,\u200b,REG_SZ,REG_EXPAND_SZ,REG_MULTI_SZ,REG_DWORD,REG_BINARY|}\", \"${3|KeyName,\u200b,HKEY_LOCAL_MACHINE,HKEY_USERS,HKEY_CURRENT_USER,HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG|}\", ${4:ValueName})",
        "description": [
			"Writes a value to the registry.",
			"\tRegWrite(Value, ValueType, KeyName [, ValueName])",
			"\tRegWrite( Value [, ValueType, , ValueName])"
		]
    },
    "Reload": {
        "prefix": "Reload",
        "body": "Reload",
        "description": "Replaces the currently running instance of the script with a new one."
    },
    "Return": {
        "prefix": "Return",
        "body": "Return",
        "description": "Returns from a subroutine to which execution had previously jumped via function-call, Gosub, Hotkey activation, GroupActivate, or other means."
    },
    "Run()": {
        "prefix": "Run(Target [, WorkingDir, Options, &OutputVarPID])",
        "body": "Run(${1:Target [}, ${2:WorkingDir}, ${3:Options|\"Max\",\"Min\",\"Hide\",\"UseErrorLevel\"|}, ${4:&OutputVarPID]})",
        "description": "Runs an external program."
    },
    "RunAs()": {
        "prefix": "RunAs(User, Password, Domain)",
        "body": "RunAs(${1:[ User}, ${2:Password}, ${3:Domain]})",
        "description": "Specifies a set of user credentials to use for all subsequent uses of Run and RunWait."
    },
    "RunWait()": {
        "prefix": "RunWait(Target [, WorkingDir, Options, &OutputVarPID])",
        "body": "RunWait(${1:Target [}, ${2:WorkingDir}, ${3:Options|\"Max\",\"Min\",\"Hide\",\"UseErrorLevel\"|}, ${4:&OutputVarPID]})",
        "description": "Unlike Run, RunWait will wait until the program finishes before continuing."
    },
    "Send()": {
        "prefix": "Send(Keys)",
        "body": "Send(${1|Keys,\u200b,\"{Enter}\",\"{Escape}\",\"{Space}\",\"{Delete}\"|})",
        "description": "Sends simulated keystrokes and mouse clicks to the active window."
    },
    "SendEvent()": {
        "prefix": "SendEvent(Keys)",
        "body": "SendEvent(${1|Keys,\u200b,\"{Enter}\",\"{Escape}\",\"{Space}\",\"{Delete}\"|})",
        "description": "SendEvent sends keystrokes using the same method as the pre-1.0.43 Send command. The rate at which keystrokes are sent is determined by SetKeyDelay."
    },
    "SendInput()": {
        "prefix": "SendInput(Keys)",
        "body": "SendInput(${1:Keys})",
        "description": "SendInput and SendPlay use the same syntax as Send but are generally faster and more reliable. In addition, they buffer any physical keyboard or mouse activity during the send, which prevents the user\"s keystrokes from being interspersed with those being sent."
    },
    "SendLevel()": {
        "prefix": "SendLevel()",
        "body": "SendLevel(${1:Level})",
        "description": "Controls which artificial keyboard and mouse events are ignored by hotkeys and hotstrings."
    },
    "SendMessage()": {
        "prefix": "SendMessage(Msg [, wParam, lParam, Control, WinTitle, WinText, ExcludeTitle, ExcludeText, Timeout])",
        "body": "SendMessage(${1:Msg}, ${2:[wParam}, ${3:lParam}, ${4:Control}, ${5:WinTitle}, ${6:WinText}, ${7:ExcludeTitle}, ${8:ExcludeText}, ${9:Timeout]})",
        "description": "Sends a message to a window or control (SendMessage additionally waits for acknowledgement)."
    },
    "SendMode()": {
        "prefix": "SendMode(Mode)",
        "body": "SendMode(${1|Mode,\"Event\",\"Play\",\"Input\",\"InputThenPlay\"|})",
        "description": "Makes Send synonymous with SendInput or SendPlay rather than the default (SendEvent). Also makes Click and MouseMove/Click/Drag use the specified method."
    },
    "SendPlay()": {
        "prefix": "SendPlay(Keys)",
        "body": "SendPlay(${1:Keys})",
        "description": "SendInput and SendPlay use the same syntax as Send but are generally faster and more reliable. In addition, they buffer any physical keyboard or mouse activity during the send, which prevents the user\"s keystrokes from being interspersed with those being sent."
    },
    "SetCapsLockState()": {
        "prefix": "SetCapsLockState([State])",
        "body": "SetCapsLockState(${1|State,\u200B,true,false,\"AlwaysOn\",\"AlwaysOff\"|})",
        "description": "Sets the state of the CapsLock key. Can also force the key to stay on or off."
    },
    "SetNumLockState()": {
        "prefix": "SetNumLockState([State])",
        "body": "SetNumLockState(${1|State,\u200B,true,false,\"AlwaysOn\",\"AlwaysOff\"|})",
        "description": "Sets the state of the NumLock key. Can also force the key to stay on or off."
    },
    "SetScrollLockState()": {
        "prefix": "SetScrollLockState([State])",
        "body": "SetScrollLockState(${1|State,\u200B,true,false,\"AlwaysOn\",\"AlwaysOff\"|})",
        "description": "Sets the state of the ScrollLock key. Can also force the key to stay on or off."
    },
    "SetControlDelay()": {
        "prefix": "SetControlDelay(Delay)",
        "body": "SetControlDelay(${1:Delay})",
        "description": "Sets the delay that will occur after each control-modifying command.\r\n If unset, the default delay is 20."
    },
    "SetDefaultMouseSpeed()": {
        "prefix": "SetDefaultMouseSpeed(Speed)",
        "body": "SetDefaultMouseSpeed(${1:Speed})",
        "description": "Sets the mouse speed that will be used if unspecified in Click and MouseMove/Click/Drag."
    },
    "SetKeyDelay()": {
        "prefix": "SetKeyDelay([Delay, PressDuration, Play])",
        "body": "SetKeyDelay(${1:Delay}, ${2:PressDuration]}, ${3|Play,\u200b,\"Play\"|})",
        "description": "Sets the delay that will occur after each keystroke sent by Send and ControlSend."
    },
    "SetMouseDelay()": {
        "prefix": "SetMouseDelay(Delay [, Play])",
        "body": "SetMouseDelay(${1:Delay}, ${3|Play,\u200b,\"Play\"|})",
        "description": "Sets the delay that will occur after each mouse movement or click."
    },
    "SetStoreCapslockMode()": {
        "prefix": "SetStoreCapslockMode(Mode)",
        "body": "SetStoreCapslockMode(${1|State,\u200B,true,false|})",
        "description": "Whether to restore the state of CapsLock after a Send."
    },
    "SetRegView()": {
        "prefix": "SetRegView(RegView)",
        "body": "SetRegView(${1:RegView})",
        "description": "Sets the registry view used by RegRead, RegWrite, RegDelete and registry loops."
    },
    "SetTimer()": {
        "prefix": "SetTimer([Function, Period, Priority])",
        "body": "SetTimer(${1:Function}, ${2|Period,\u200b,0|}, ${3:Priority})",
        "description": "Causes a subroutine to be launched automatically and repeatedly at a specified time interval.\r\n Period > 0\tautomatically repeat function\r\n Period = 0\tdelete timer\r\n Period < 0\tOnly run once"
    },
    "SetTitleMatchMode(MatchMode)": {
        "prefix": "SetTitleMatchMode(MatchMode)",
        "body": "SetTitleMatchMode(${1|MatchMode,\"Fast\",\"Slow\",\"RegEx\",1,2,3|})",
        "description": "Sets the matching behavior of the WinTitle parameter in commands such as WinWait."
    },
    "SetWinDelay(Delay)": {
        "prefix": "SetWinDelay(Delay)",
        "body": "SetWinDelay(${1:Delay})",
        "description": "Sets the delay that will occur after each windowing command, such as WinActivate."
    },
    "SetWorkingDir(DirName)": {
        "prefix": "SetWorkingDir(DirName)",
        "body": "SetWorkingDir(${1:DirName})",
        "description": "Changes the script\"s current working directory."
    },
    "Shutdown()": {
        "prefix": "Shutdown([Code])",
        "body": "Shutdown(${1|[Code],\u200b|})",
        "description": "Shuts down, restarts, or logs off the system."
    },
    "Sleep": {
        "prefix": "Sleep(DelayInMilliseconds)",
        "body": "Sleep(${1:DelayInMilliseconds})",
        "description": "Waits the specified amount of time before continuing."
    },
    "Sort": {
        "prefix": "Sort(String [, Options, Function])",
        "body": "Sort(${1:String [}, ${2|Options,\u200b,\"C\",\"C1\",\"COn\",\"CLocale\",\"CLogical\",\"Dx\",\"N\",\"Pn\",\"R\",\"Random\",\"U\",\"Z\",\"\\\"|}, ${3:Function]})",
        "description": "Arranges a variable\"s contents in alphabetical, numerical, or random order (optionally removing duplicates)."
    },
    "SoundBeep": {
        "prefix": "SoundBeep(Frequency, Duration)",
        "body": "SoundBeep(${1:[ Frequency}, ${2:Duration]})",
        "description": "Emits a tone from the PC speaker."
    },
    "SoundGetInterface": {
        "prefix": "SoundGetInterface(IID, [Component, Device])",
        "body": "SoundGetInterface(${1:IID [}, ${2:Component}, ${3:Device})",
        "description": "Retrieves a native COM interface of a sound device or component."
    },
    "SoundGetMute": {
        "prefix": "SoundGetMute([Component, Device])",
        "body": "SoundGetMute(${1:[Component}, ${2:Device})",
        "description": "Retrieves a mute setting of a sound device."
    },
    "SoundGetName": {
        "prefix": "SoundGetName([Component, Device])",
        "body": "SoundGetName(${1:[Component}, ${2:Device})",
        "description": "Retrieves the name of a sound device or component."
    },
    "SoundGetVolume": {
        "prefix": "SoundGetVolume([Component, Device])",
        "body": "SoundGetVolume(${1:[Component}, ${2:Device})",
        "description": "Retrieves a volume setting of a sound device."
    },
    "SoundPlay": {
        "prefix": "SoundPlay(Filename [, Wait])",
        "body": "SoundPlay(${1:Filename [}, ${2:wait]})",
        "description": "Plays a sound, video, or other supported file type."
    },
    "SoundSetMute()": {
        "prefix": "SoundSetMute(NewSetting [, Component, Device])",
        "body": "SoundSetMute(${1:NewSetting [}, ${2:Component}, ${2:Device})",
        "description": "Changes various settings of a sound device (master mute, master volume, etc.)"
    },
    "SoundSetVolume()": {
        "prefix": "SoundSetVolume(NewSetting [, Component, Device])",
        "body": "SoundSetVolume(${1:NewSetting [}, ${2:Component}, ${2:Device})",
        "description": "Changes the wave output volume for a sound device."
    },
    "SplitPath()": {
        "prefix": "SplitPath(Path , &OutFileName, &OutDir, &OutExtension, &OutNameNoExt, &OutDrive)",
        "body": "SplitPath(${1:Path [}, ${2:&OutFileName}, ${3:&OutDir}, ${4:&OutExtension}, ${5:&OutNameNoExt}, ${6:&OutDrive]})",
        "description": "Separates a file name or URL into its name, directory, extension, and drive."
    },
    "StatusBarGetText()": {
        "prefix": "StatusBarGetText([Part#, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "StatusBarGetText, ${1:Part#}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]}",
        "description": "Retrieves the text from a standard status bar control."
    },
    "StatusBarWait()": {
        "prefix": "StatusBarWait([BarText, Timeout, Part#, WinTitle, WinText, Interval, ExcludeTitle, ExcludeText])",
        "body": "StatusBarWait(${1:[BarText}, ${2:Seconds}, ${3:Part#}, ${4:WinTitle}, ${5:WinText}, ${6:Interval}, ${7:ExcludeTitle}, ${8:ExcludeText]})",
        "description": "Waits until a window\"s status bar contains the specified string."
    },
    "Suspend()": {
        "prefix": "Suspend(Mode)",
        "body": "Suspend(${1|Mode,\u200b,true,false,-1|})",
        "description": "Disables or enables all or selected hotkeys and hotstrings."
    },
    "SysGet()": {
        "prefix": "SysGet(Property)",
        "body": "SysGet(${1:Property})",
        "description": "Retrieves screen resolution, multi-monitor info, dimensions of system objects, and other system properties."
    },
    "Thread": {
        "prefix": "Thread(SubFunction [, Value1, Value2])",
        "body": "Thread, ${1|SubFunction,\"NoTimers\",\"Priority\",\"Interrupt\", ${2:[Value1]}, ${2:[Value2]})",
        "description": "Sets the priority or interruptibility of threads. It can also temporarily disable all timers."
    },
    "Throw": {
        "prefix": "Throw Expression",
        "body": "Throw ${1:[Expression]}",
        "description": "Signals the occurrence of an error. This signal can be caught by a try-catch statement."
    },
    "ToolTip": {
        "prefix": "ToolTip",
        "body": "ToolTip(${1:[ Text}, ${2:X}, ${3:Y}, ${4:WhichToolTip]})",
        "description": "Creates an always-on-top window anywhere on the screen."
    },
    "TrayTip": {
        "prefix": "TrayTip([Text, Title, Options])",
        "body": "TrayTip(${1:[ Text}, ${2:Title}, ${3|Options,\u200b,\"Iconi\",\"Icon!\",\"N/A\"})",
        "description": "Creates a balloon message window near the tray icon. On Windows 10, a toast notification may be shown instead."
    },
    "Try": {
        "prefix": "Try",
        "body": "Try ${1:Statement}",
        "description": "Guards one or more statements (commands or expressions) against runtime errors and exceptions thrown by the throw command."
    },
    "Trim": {
        "prefix": "Trim",
        "body": "Trim(${1:String}, ${2:[OmitChars]})",
        "description": "Trims characters from the beginning and/or end of a string."
    },
    "Until": {
        "prefix": "Until",
        "body": "Until ${1:Expression}",
        "description": "Applies a condition to the continuation of a Loop or For-loop."
    },
    "While": {
        "prefix": "While",
        "body": "While ${1:Expression}",
        "description": "Performs a series of commands repeatedly until the specified expression evaluates to false."
    },
    "WinActivate": {
        "prefix": "WinActivate([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinActivate(${1:[ WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Activates the specified window."
    },
    "WinActivateBottom": {
        "prefix": "WinActivateBottom([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinActivateBottom(${1:[ WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Same as WinActivate except that it activates the bottommost matching window rather than the topmost."
    },
    "WinClose": {
        "prefix": "WinClose([WinTitle, WinText, SecondsToWait, ExcludeTitle, ExcludeText])",
        "body": "WinClose(${1:[ WinTitle}, ${2:WinText}, ${3:SecondsToWait}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Closes the specified window."
    },
    "WinGetClass": {
        "prefix": "WinGetClass([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetClass(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Retrieves the specified window\"s class name."
    },
    "WinGetPos": {
        "prefix": "WinGetPos([&X, &Y, &Width, &Height, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetPos(${1:[&X}, ${2:&Y}, ${3:&Width}, ${4:&Height}, ${5:WinTitle}, ${6:WinText}, ${7:ExcludeTitle}, ${8:ExcludeText})",
        "description": "Retrieves the position and size of the specified window."
    },
    "WinGetClientPos": {
        "prefix": "WinGetClientPos([&X, &Y, &Width, &Height, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetClientPos(${1:[&X}, ${2:&Y}, ${3:&Width}, ${4:&Height}, ${5:WinTitle}, ${6:WinText}, ${7:ExcludeTitle}, ${8:ExcludeText})",
        "description": "Retrieves the position and size of the specified window's client area."
    },
	"WinGetControls": {
        "prefix": "WinGetControls([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetControls(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns Array of  the control names for all controls in the specified window."
    },
	"WinGetControlsHwnd": {
        "prefix": "WinGetControlsHwnd([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetControlsHwnd(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns Array of the unique ID numbers for all controls in the specified window."
    },
	"WinGetCount": {
        "prefix": "WinGetCount([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetCount(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the number of existing windows that match the specified criteria."
    },
	"WinGetStyle": {
        "prefix": "WinGetStyle([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetStyle(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the style of the specified window."
    },
	"WinGetExStyle": {
        "prefix": "WinGetExStyle([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetExStyle(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the extended style (respectively) of the specified window."
    },
	"WinGetID": {
        "prefix": "WinGetID([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetID(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the unique ID number of the specified window."
    },
	"WinGetIDLast": {
        "prefix": "WinGetIDLast([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetIDLast(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the unique ID number of the last/bottommost window if there is more than one match."
    },
	"WinGetMinMax": {
        "prefix": "WinGetMinMax([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetMinMax(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the state whether the specified window is maximized or minimized."
    },
	"WinGetPID": {
		"prefix": "WinGetPID([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetPID(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Returns the Process ID number of the specified window."
    },
	"WinGetProcessName": {
		"prefix": "WinGetProcessName([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetProcessName(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the name of the process that owns the specified window."
    },
	"WinGetProcessPath": {
		"prefix": "WinGetProcessPath([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinGetProcessPath(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Returns the full path and name of the process that owns the specified window."
    },
	"WinGetText": {
		"prefix": "WinGetText([WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "WinGetText(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
		"description": "Retrieves the text from the specified window."
	},
	"WinGetTitle": {
		"prefix": "WinGetTitle([WinTitle, WinText, ExcludeTitle, ExcludeText])",
		"body": "WinGetTitle(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
		"description": "Retrieves the title of the specified window."
	},
    "WinHide": {
        "prefix": "WinHide([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinHide(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Hides the specified window."
    },
    "WinKill": {
        "prefix": "WinKill([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinKill(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Forces the specified window to close."
    },
    "WinMaximize": {
        "prefix": "WinMaximize([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinMaximize(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Enlarges the specified window to its maximum size."
    },
    "WinMinimize": {
        "prefix": "WinMinimize([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinMinimize(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Collapses the specified window into a button on the task bar."
    },
    "WinMinimizeAll": {
        "prefix": "WinMinimizeAll",
        "body": "WinMinimizeAll",
        "description": "Minimizes all windows."
    },
    "WinMinimizeAllUndo": {
        "prefix": "WinMinimizeAllUndo",
        "body": "WinMinimizeAllUndo",
        "description": "Unminimizes all windows."
    },
    "WinMove": {
        "prefix": "WinMove(X, Y [, Width, Height, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinMove(${1:X}, ${2:Y}, ${3:Width}, ${4:Height}, ${5:[WinTitle}, ${6:WinText}, ${7:ExcludeTitle}, ${8:ExcludeText]})",
        "description": "Changes the position and/or size of the specified window."
    },
    "WinRestore": {
        "prefix": "WinRestore([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinRestore(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Unminimizes or unmaximizes the specified window if it is minimized or maximized."
    },
    "WinSetAlwaysOnTop": {
        "prefix": "WinSetAlwaysOnTop([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetAlwaysOnTop(${1:WinTitle}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Makes the specified window stay on top of all other windows (except other always-on-top windows)."
    },
    "WinSetEnabled": {
        "prefix": "WinSetEnabled(Value, [WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetEnabled(${1:Value [}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Enables or disables the specified window."
    },
    "WinSetStyle": {
        "prefix": "WinSetStyle(Value, [WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetStyle(${1:Value [}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Changes the style of the specified window, respectively.."
    },
    "WinSetExStyle": {
        "prefix": "WinSetExStyle(Value, [WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetExStyle(${1:Value [}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Changes the extended style of the specified window, respectively.."
    },
    "WinSetRegion": {
        "prefix": "WinSetRegion([Options, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetRegion(${1|Options,\u200b,\"Wn Hn\",\"30-30\",\"E\",\"R30-30\"}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Changes the shape of the specified window to be the specified rectangle, ellipse, or polygon."
    },
    "WinSetTitle": {
        "prefix": "WinSetTitle(NewTitle [WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetTitle(${1:NewTitle [}, ${2:WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Changes the title of the specified window."
    },
    "WinSetTransColor": {
        "prefix": "WinSetTransColor(ColorValue [, WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinSetTransColor(${1|ColorValue,\u200B\",\"Default\",0xFFFFAA,\"Black\",\"SilverGray\",\"White\",\"Maroon\",\"Red\",\"Purple\",\"Fuchsia\",\"Green\",\"Lime\",\"Olive\",\"Yellow\",\"Navy\",\"Blue\",\"Teal\",\"Aqua\"|}, ${2:[WinTitle}, ${3:WinText}, ${4:ExcludeTitle}, ${5:ExcludeText})",
        "description": "Makes all pixels of the chosen color invisible inside the specified window."
    },
    "WinSetTransparent": {
        "prefix": "WinSetTransparent([WinTitle, WinText ExcludeTitle, ExcludeText])",
        "body": "WinSetTransparent(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText})",
        "description": "Changes the title of the specified window."
    },
    "WinShow": {
        "prefix": "WinShow([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinShow(${1:WinTitle}, ${2:WinText}, ${3:ExcludeTitle}, ${4:ExcludeText]})",
        "description": "Unhides the specified window."
    },
    "WinWait([Wintitle])": {
        "prefix": "WinWait([WinTitle])",
        "body": "WinWait(${1:WinTitle})",
        "description": "Waits until the specified window exists."
    },
    "WinWait([WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText])": {
        "prefix": "WinWait([WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText])",
        "body": "WinWait(${1:WinTitle}, ${2:WinText}, ${3:Seconds [}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Waits until the specified window exists."
    },
    "WinWaitActive": {
        "prefix": "WinWaitActive([WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText])",
        "body": "WinWaitActive(${1:WinTitle}, ${2:WinText}, ${3:Seconds [}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Waits until the specified window is active."
    },
    "WinWaitClose": {
        "prefix": "WinWaitClose([WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText])",
        "body": "WinWaitClose(${1:WinTitle}, ${2:WinText}, ${3:Seconds [}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Waits until the specified window does not exist."
    },
    "WinWaitNotActive": {
        "prefix": "WinWaitNotActive([WinTitle, WinText, Timeout, ExcludeTitle, ExcludeText])",
        "body": "WinWaitNotActive(${1:WinTitle}, ${2:WinText}, ${3:Seconds [}, ${4:ExcludeTitle}, ${5:ExcludeText]})",
        "description": "Waits until the specified window is not active."
    },
    "Abs()": {
        "prefix": "Abs()",
        "body": "Abs(${1:Number})",
        "description": "Returns the absolute value of Number."
    },
    "ACos()": {
        "prefix": "ACos()",
        "body": "ACos(${1:Number})",
        "description": "Returns the arccosine (the number whose cosine is Number) in radians."
    },
    "ASin()": {
        "prefix": "ASin()",
        "body": "ASin(${1:Number})",
        "description": "Returns the arcsine (the number whose sine is Number) in radians."
    },
    "ATan()": {
        "prefix": "ATan()",
        "body": "ATan(${1:Number})",
        "description": "Returns the arctangent (the number whose tangent is Number) in radians."
    },
    "Buffer()": {
        "prefix": "Buffer([ByteCount, FillByte])",
        "body": "Buffer(${1:ByteCount}, ${1:FillByte})",
        "description": "Returns the arctangent (the number whose tangent is Number) in radians."
    },
    "CallbackCreate()": {
        "prefix": "CallbackCreate(Function [, Options := \"\", ParamCount := Function.MinParams])",
        "body": "CallbackCreate(\"${1:Function}\", ${2|Options,\u200B,\"Fast\",\"CDecl\",\"&\"}, ${3:ParamCount = FormalCount})",
        "description": "Creates a machine-code address that when called, redirects the call to a function in the script."
    },
    "Ceil()": {
        "prefix": "Ceil(Number)",
        "body": "Ceil(${1:Number})",
        "description": "Returns Number rounded up to the nearest integer (without any .00 suffix)."
    },
    "Chr()": {
        "prefix": "Chr(Number)",
        "body": "Chr(${1:Number})",
        "description": "Returns the string (usually a single character) corresponding to the character code indicated by the specified number."
    },
    "Cos()": {
        "prefix": "Cos(Number)",
        "body": "Cos(${1:Number})",
        "description": "Returns the trigonometric cosine of Number."
    },
    "Ord()": {
        "prefix": "Ord(String)",
        "body": "Ord(${1:String})",
        "description": "Returns the ordinal value (numeric character code) of the first character in the specified string."
    },
    "ObjRelease()": {
        "prefix": "ObjRelease(Ptr)",
        "body": "ObjRelease(${1:Ptr})",
        "description": "Decrements an object\"s reference count."
    },
    "ObjAddRef()": {
        "prefix": "ObjAddRef(Ptr)",
        "body": "ObjAddRef(${1:Ptr})",
        "description": "Increments an object\"s reference count."
    },
    "ComObject()": {
        "prefix": "ComObject(CLSID , IID)",
        "body": "ComObject(${1:CLSID}, ${2:IID})",
        "description": "Creates an object representing a typed value to be passed as a parameter or return value.."
    },
    "ComObjActive()": {
        "prefix": "ComObjActive(CLSID)",
        "body": "ComObjActive(${1:CLSID})",
        "description": "Retrieves a running object that has been registered with OLE."
    },
    "ComObjArray()": {
        "prefix": "ComObjArray()",
        "body": "ComObjArray(${1:VarType}, ${2:Count1} [, ${3:Count2, ... Count8}])",
        "description": "Creates a SafeArray for use with COM."
    },
    "ComObjConnect()": {
        "prefix": "ComObjConnect()",
        "body": "ComObjConnect(${1:ComObject} [, ${2:Prefix}])",
        "description": "Connects the object\"s event sources to functions with a given prefix."
    },
    "ComObjEnwrap()": {
        "prefix": "ComObjEnwrap()",
        "body": "ComObjEnwrap(${1:DispPtr})",
        "description": "Wraps a raw IDispatch pointer in a usable object and automatically calls AddRef.\n⚠Deprecated"
    },
    "ComObjFlags()": {
        "prefix": "ComObjFlags()",
        "body": "ComObjFlags(${1:ComObject} [, ${2:NewFlags}, ${3:Mask}])",
        "description": "Retrieves or changes flags which control a COM wrapper object\"s behaviour."
    },
    "ComObjGet()": {
        "prefix": "ComObjGet()",
        "body": "ComObjGet(${1:Name})",
        "description": "Returns a reference to an object provided by a COM component."
    },
    "ComObjQuery()": {
        "prefix": "ComObjQuery()",
        "body": "ComObjQuery(${1:ComObject}, [${2:SID},] ${3:IID})",
        "description": "Queries a COM object for an interface or service."
    },
    "ComObjType()": {
        "prefix": "ComObjType()",
        "body": "ComObjType(${1:ComObject}, \"${2:Name|IID}\")",
        "description": "Retrieves type information from a COM object."
    },
    "ComObjUnwrap()": {
        "prefix": "ComObjUnwrap()",
        "body": "ComObjUnwrap(${1:ComObject})",
        "description": "Unwraps a raw IDispatch pointer in a usable object and automatically calls AddRef.\n⚠Deprecated"
    },
    "ComObjValue()": {
        "prefix": "ComObjValue()",
        "body": "ComObjValue(${1:ComObject})",
        "description": "Retrieves the value or pointer stored in a COM wrapper object."
    },
    "DllCall()": {
        "prefix": "DllCall()",
        "body": "DllCall(\"${1:[DllFile\\]Function}\",${2:[ Type1}, ${3:Arg1}, ${4:Type2}, ${5:Arg2}, ${6:\"Cdecl ReturnType\"]})",
        "description": "Calls a function inside a DLL, such as a standard Windows API function."
    },
    "Exp()": {
        "prefix": "Exp()",
        "body": "Exp(${1:Number})",
        "description": "Returns e (which is approximately 2.71828182845905) raised to the Nth power."
    },
    "FileExist()": {
        "prefix": "FileExist()",
        "body": "FileExist(${1:FilePattern})",
        "description": "Checks for the existence of a file or folder and returns its attributes."
    },
    "FileOpen()": {
        "prefix": "FileOpen()",
        "body": "FileOpen(${1:Filename}, ${2:Flags}, ${3:[Encoding]})",
        "description": "Opens a file to read specific content from it and/or to write new content into it."
    },
    "Floor()": {
        "prefix": "Floor()",
        "body": "Floor(${1:Number})",
        "description": "Returns Number rounded down to the nearest integer (without any .00 suffix)."
    },
    "Format()": {
        "prefix": "Format()",
        "body": "Format(${1:FormatStr [}, ${2:Values...]})",
        "description": "Formats a variable number of input values according to a format string."
    },
    "GetKeyName()": {
        "prefix": "GetKeyName(KeyName)",
        "body": "GetKeyName(${1:KeyName})",
        "description": "Retrieves the name/text of a key."
    },
    "GetKeyVK()": {
        "prefix": "GetKeyVK(KeyName)",
        "body": "GetKeyVK(${1:KeyName})",
        "description": "Retrieves the virtual key code of a key."
    },
    "GetKeySC()": {
        "prefix": "GetKeySC(KeyName)",
        "body": "GetKeySC(${1:KeyName})",
        "description": "Retrieves the scan code of a key."
    },
    "GetKeyState()": {
        "prefix": "GetKeyState(KeyName [, Mode])",
        "body": "GetKeyState(${1:KeyName [}, ${2|Mode,\u200B,\"P\",\"T\"|})",
        "description": "Checks if a keyboard key or mouse/joystick button is down or up. Also retrieves joystick status."
    },
    "IL_Add()": {
        "prefix": "IL_Add()",
        "body": "IL_Add(${1:ImageListID}, ${2:Filename [}, ${3:IconNumber}, ${4:ResizeNonIcon?]})",
        "description": "Adds an icon or picture to the specified ImageListID and returns the new icon\"s index (1 is the first icon, 2 is the second, and so on)."
    },
    "IL_Create()": {
        "prefix": "IL_Create()",
        "body": "IL_Create(${1:[InitialCount}, ${2:GrowCount}, ${3:LargeIcons?]})",
        "description": "Creates a new ImageList, initially empty, and returns the unique ID of the ImageList (or 0 upon failure)."
    },
    "IL_Destroy()": {
        "prefix": "IL_Destroy()",
        "body": "IL_Destroy(${1:ImageListID})",
        "description": "Deletes the specified ImageList and returns 1 upon success and 0 upon failure."
    },
    "InStr(Haystack, Needle)": {
        "prefix": "InStr(Haystack, Needle)",
        "body": "InStr(${1:Haystack}, ${2:Needle})",
        "description": "Searches for a given occurrence of a string, from the left or the right."
    },
    "InStr(Haystack, Needle [, CaseSense := false, StartingPos := 1, Occurrence := 1])": {
        "prefix": "InStr(Haystack, Needle [, CaseSense := false, StartingPos := 1, Occurrence := 1])",
        "body": "InStr(${1:Haystack}, ${2:Needle [}, ${3|CaseSensitive,\u200B,true,false,\"Locale\"|}, ${4:StartingPos}, ${5:Occurrence]})",
        "description": "Searches for a given occurrence of a string, from the left or the right."
    },
    "InstallKeybdHook()": {
        "prefix": "InstallKeybdHook([Install, Force])",
        "body": "InstallKeybdHook(${[1:Install}, ${2:Force]})",
        "description": "Installs or uninstalls the keyboard hook."
    },
    "InstallMouseHook()": {
        "prefix": "InstallMouseHook([Install, Force])",
        "body": "InstallMouseHook(${[1:Install}, ${2:Force]})",
        "description": "Installs or uninstalls the mouse hook."
    },
    "FunctObj.IsByRef()": {
        "prefix": "FunctObj.IsByRef(Var)",
        "body": ".IsByRef(${1:Var})",
        "description": "Returns a non-zero number if the specified ByRef parameter was supplied with a variable."
    },
    "IsLabel()": {
        "prefix": "IsLabel(LabelName)",
        "body": "IsLabel(${1:LabelName})",
        "description": "Returns a non-zero number if the specified label exists in the script."
    },
    "IsAlpha()": {
        "prefix": "IsAlpha(Value [, Mode])",
        "body": "IsAlpha(${1:Value}, ${2|Mode,\u200B,\"Locale\"})",
        "description": "True if Value is a string and is empty or contains only alphabetic characters."
    },
    "IsAlnum()": {
        "prefix": "IsAlnum(Value [, Mode])",
        "body": "IsAlnum(${1:Value}, ${2|Mode,\u200B,\"Locale\"})",
        "description": "True if Value is a string and is empty or contains only alphabetic characters, integers and characters 0 through 9 are also allowed."
    },
    "IsUpper()": {
        "prefix": "IsUpper (Value [, Mode])",
        "body": "IsUpper (${1:Value}, ${2|Mode,\u200B,\"Locale\"})",
        "description": "True if Value is a string and is empty or contains only uppercase characters."
    },
    "IsLower()": {
        "prefix": "IsLower(Value [, Mode])",
        "body": "IsLower(${1:Value}, ${2|Mode,\u200B,\"Locale\"})",
        "description": "True if Value is a string and is empty or contains only lowercase characters."
    },
    "IsInteger()": {
        "prefix": "IsInteger(Value)",
        "body": "IsInteger(${1:Value})",
        "description": "True if Value is an integer or a purely numeric string (decimal or hexadecimal) without a decimal point. \nLeading and trailing spaces and tabs are allowed. The string may start with a plus or minus sign and must not be empty."
    },
    "IsFloat()": {
        "prefix": "IsFloat(Value)",
        "body": "IsFloat(${1:Value})",
        "description": "True if Value is a floating point number or a purely numeric string containing a decimal point. \nLeading and trailing spaces and tabs are allowed. The string may start with a plus sign, minus sign, or decimal point and must not be empty."
    },
    "IsNumber()": {
        "prefix": "IsNumber(Value)",
        "body": "IsNumber(${1:Value})",
        "description": "True if IsInteger(Value) or IsFloat(Value) is true."
    },
    "IsObject()": {
        "prefix": "IsObject(Value)",
        "body": "IsObject(${1:Value})",
        "description": "True if Value is an object. This includes objects derived from Object, prototype objects such as 0.base, and COM objects, but not numbers or strings."
    },
    "IsSet()": {
        "prefix": "IsSet(Value)",
        "body": "IsSet(${1:Value})",
        "description": "True if the variable Value has been assigned a value."
    },
    "IsSetRef()": {
        "prefix": "IsSetRef(Value)",
        "body": "IsSetRef(${1:Value})",
        "description": "True if the VarRef contained by Value has been assigned a value."
    },
    "IsDigit()": {
        "prefix": "IsDigit(Value)",
        "body": "IsDigit(${1:Value})",
        "description": "True if Value is a positive integer, an empty string, or a string which contains only the characters 0 through 9. Other characters such as the following are not allowed: spaces, tabs, plus signs, minus signs, decimal points, hexadecimal digits, and the 0x prefix."
    },
    "IsXDigit()": {
        "prefix": "IsXDigit(Value)",
        "body": "IsXDigit(${1:Value})",
        "description": "Hexadecimal digit: Same as digit except the characters A through F (uppercase or lowercase) are also allowed. A prefix of 0x is tolerated if present."
    },
    "IsSpace()": {
        "prefix": "IsSpace(Value)",
        "body": "IsSpace(${1:Value})",
        "description": "True if Value is a string and is empty or contains only whitespace consisting of the following characters: space (A_Space or `s), tab (A_Tab or `t), linefeed (`n), return (`r), vertical tab (`v), and formfeed (`f)."
    },
    "IsTime()": {
        "prefix": "IsTime(Value)",
        "body": "IsTime(${1:Value})",
        "description": "True if Value is a valid date-time stamp, which can be all or just the leading part of the YYYYMMDDHH24MISS format."
    },
    "Ln()": {
        "prefix": "Ln(Number)",
        "body": "Ln(${1:Number})",
        "description": "Returns the natural logarithm (base e) of Number."
    },
    "Log()": {
        "prefix": "Log(Number)",
        "body": "Log(${1:Number})",
        "description": "Returns the logarithm (base 10) of Number."
    },
    "LTrim()": {
        "prefix": "LTrim(String,OmitChars)",
        "body": "LTrim(${1:String}, ${2|OmitChars = \" `t\",\u200B|})",
        "description": "Trims characters from the beginning and/or end of a string."
    },
    "LV.Add()": {
        "prefix": "LV.Add()",
        "body": ".Add(${1:[Options}, ${2:Col1}, ${3:Col2}, ${4:...]})",
        "description": "Adds a new row to the bottom of the list."
    },
    "LV.Delete()": {
        "prefix": "LV.Delete()",
        "body": ".Delete(${1:[RowNumber]})",
        "description": "Deletes the specified row or all rows."
    },
    "LV.DeleteCol()": {
        "prefix": "LV.DeleteCol()",
        "body": ".DeleteCol(${1:ColumnNumber})",
        "description": "Deletes the specified column and all of the contents beneath it."
    },
    "LV.GetCount()": {
        "prefix": "LV.GetCount([Mode])",
        "body": ".GetCount(${1|Mode,\u200B|})",
        "description": "Returns the total number of rows or columns, or the number of selected rows only."
    },
    "LV.GetNext()": {
        "prefix": "LV.GetNext([StartingRowNumber, RowType])",
        "body": ".GetNext(${1:[StartingRowNumber}, ${2:\"C|F\"]})",
        "description": "Returns the row number of the next selected, checked, or focused row."
    },
    "LV.GetText()": {
        "prefix": "LV.GetText(RowNumber [, ColumnNumber])",
        "body": ".GetText(${1:RowNumber [}, ${2:ColumnNumber]})",
        "description": "Retrieves the text at the specified row and column number."
    },
    "LV.Insert()": {
        "prefix": "LV.Insert(RowNumber [, Options, Col1, Col2, ...])",
        "body": ".Insert(${1:RowNumber [}, ${2:Options}, ${3:Col...})",
        "description": "Inserts a new row before the specified row."
    },
    "LV.InsertCol()": {
        "prefix": "LV.InsertCol(ColumnNumber [, Options, ColumnTitle])",
        "body": ".InsertCol(${1:ColumnNumber [}, ${2:Options}, ${3:ColumnTitle]})",
        "description": "Inserts a new column before the specified column."
    },
    "LV.Modify()": {
        "prefix": "LV.ModifyRowNumber [, Options, NewCol1, NewCol2, ...])",
        "body": ".Modify(${1:RowNumber}, ${2:Options [}, ${3:NewCol1}, ${4:NewCol2}, ${5:...]})",
        "description": "Modifies the attributes and/or text of a row."
    },
    "LV.ModifyCol()": {
        "prefix": "LV.ModifyCol([ColumnNumber, Options, ColumnTitle])",
        "body": ".ModifyCol(${1:[ColumnNumber}, ${2:Options}, ${3:ColumnTitle]})",
        "description": "Modifies the attributes and/or text of the specified column and its header."
    },
    "LV.SetImageList()": {
        "prefix": "LV.SetImageList(ImageListID [, IconType])",
        "body": ".SetImageList(${1:ImageListID} [, ${2|IconType,\u200B,0,1,2|})",
        "description": "Sets or replaces the ListView\"s ImageList."
    },
    "Map()": {
        "prefix": "Map(Key1, Value1, Key2, Value2,...)",
        "body": "Map(${1:Key1}, ${2:Value1})",
        "description": "Creates a Map and sets items.\r\n Example:\r\n MapObj := Map(\"Red\",\"ff0000\",\"Green\",\"00ff00\")\r\n MsgBox(MapObj[\"Red\"])\r\n For Color, ColorValue in MapObj\r\n \tMsgBox(Color \" has the value:\" ColorValue)"
    },
    "Mod()": {
        "prefix": "Mod(Dividend, Divisor)",
        "body": "Mod(${1:Dividend}, ${2:Divisor})",
        "description": "Returns the remainder when Dividend is divided by Divisor."
    },
    "NumGet() [": {
        "prefix": "NumGet(Source, [Offset,] Type) [",
        "body": "NumGet(${1:VarOrAddress [}, ${2:Offset = 0}, ${3:Type = \"UInt\"]})",
        "description": "Returns the binary number stored at the specified address+offset."
    },
    "NumPut()": {
        "prefix": "NumPut(Type, Number, [Type2, Number2, ...] Target [, Offset])",
        "body": "NumPut(${1:Number}, ${2:VarOrAddress [}, ${3:Offset = 0}, ${4:Type = \"UInt\"]})",
        "description": "Stores a number in binary format at the specified address+offset."
    },
    "OnMessage() [": {
        "prefix": "OnMessage(MsgNumber [, Function, MaxThreads]) [",
        "body": "OnMessage(${1:MsgNumber [}, ${2:\"Function\"]}, ${2:\"MaxThreads\"]})",
        "description": "Specifies a function or function object to call automatically when the script receives the specified message."
    },
    "RegExMatch()": {
        "prefix": "RegExMatch(Haystack, NeedleRegEx [, &OutputVar, StartingPos := 1])",
        "body": "RegExMatch(${1:Haystack}, ${2:NeedleRegEx [}, ${3:&OutputVar = \"\"}, ${4:StartingPos = 1]})",
        "description": "Determines whether a string contains a pattern (regular expression)."
    },
    "RegExReplace()": {
        "prefix": "RegExReplace(Haystack, NeedleRegEx [, Replacement := \"\", &OutputVarCount := \"\", Limit := -1, StartingPos := 1])",
        "body": "RegExReplace(${1:Haystack}, ${2:NeedleRegEx [}, ${3:Replacement}, ${4:&OutputVarCount}, ${5:Limit = -1}, ${6:StartingPos = 1]})",
        "description": "Replaces occurrences of a pattern (regular expression) inside a string."
    },
    "Round()": {
        "prefix": "Round(Number [, Places])",
        "body": "Round(${1:Number [}, ${2:Places]})",
        "description": "Returns Number rounded to N decimal places."
    },
    "RTrim()": {
        "prefix": "RTrim(String [, OmitChars := \" `t\"])",
        "body": "RTrim(${1:String}, ${2:OmitChars = \" `t\"})",
        "description": "Trims characters from the end of a string."
    },
    "SB.SetIcon()": {
        "prefix": "SB.SetIcon(Filename [, IconNumber := 1, PartNumber := 1]))",
        "body": ".SetIcon(${1|FileName,\"HBITMAP:\" bitmap-handle,\"HICON:\" icon-handle|}, ${2:[IconNumber}, ${3:PartNumber]})",
        "description": "Displays a small icon to the left of the text in the specified part."
    },
    "SB.SetParts()": {
        "prefix": "SB.SetParts([Width1, Width2, ... Width255])",
        "body": ".SetParts(${1:[Width}, ${2:Width2}, ${3:... Width255]})",
        "description": "Divides the bar into multiple sections according to the specified widths (in pixels)."
    },
    "SB.SetText()": {
        "prefix": "SB.SetText(NewText [, PartNumber := 1, Style := 0])",
        "body": ".SetText(${1:NewText [}, ${2:PartNumber}, ${3:Style]})",
        "description": "Displays NewText in the specified part of the status bar."
    },
    "Sin()": {
        "prefix": "Sin(Number)",
        "body": "Sin(${1:Number})",
        "description": "Returns the trigonometric sine of Number."
    },
    "Sqrt()": {
        "prefix": "Sqrt(Number)",
        "body": "Sqrt(${1:Number})",
        "description": "Returns the square root of Number."
    },
    "StrGet()": {
        "prefix": "StrGet(Source [, Length] [, Encoding := None])",
        "body": "StrGet(${1:Address}, ${2:[Length]}, ${3:[Encoding = None]})",
        "description": "Copies a string from a memory address, optionally converting it from a given code page."
    },
    "StrLen()": {
        "prefix": "StrLen(String)",
        "body": "StrLen(${1:String})",
        "description": "Retrieves the count of how many characters are in a string."
    },
    "StrLower": {
        "prefix": "StrLower(String)",
        "body": "StrLower(${1:String})",
        "description": "Converts a string to lowercase."
    },
    "StrPut()": {
        "prefix": "StrPut(String, [Target [, Length] , Encoding := None])",
        "body": "StrPut(${1:String}, ${2:Target}, ${3:[Length]}, ${4:[Encoding = None]})",
        "description": "Copies a string to a memory address, optionally converting it to a given code page."
    },
    "StrSplit(String [, Delimiters])": {
        "prefix": "StrSplit(String [, Delimiters])",
        "body": "StrSplit(${1:String}, ${2:[Delimiters})",
        "description": "Separates a string into an array of substrings using the specified delimiters."
    },
    "StrSplit(String [, Delimiters, OmitChars])": {
        "prefix": "StrSplit(String [, Delimiters, OmitChars])",
        "body": "StrSplit(${1:String}, ${2:[Delimiters}, ${3:OmitChars]})",
        "description": "Separates a string into an array of substrings using the specified delimiters."
    },
    "StrSplit(String [, Delimiters, OmitChars, MaxParts])": {
        "prefix": "StrSplit(String [, Delimiters, OmitChars, MaxParts])",
        "body": "StrSplit(${1:String}, ${2:[Delimiters}, ${3:OmitChars}, ${4:MaxParts]})",
        "description": "Separates a string into an array of substrings using the specified delimiters."
    },
    "StrReplace(Haystack, Needle)": {
        "prefix": "StrReplace(Haystack, Needle)",
        "body": "StrReplace(${1:Haystack}, ${2:SearchText})",
        "description": "Replaces the specified substring with a new string."
    },
    "StrReplace(Haystack, Needle [, ReplaceText])": {
        "prefix": "StrReplace(Haystack, Needle [, ReplaceText])",
        "body": "StrReplace(${1:Haystack}, ${2:SearchText [}, ${3:ReplaceText]})",
        "description": "Replaces the specified substring with a new string."
    },
    "StrReplace(Haystack, Needle [, ReplaceText, CaseSense, &OutputVarCount, Limit])": {
        "prefix": "StrReplace(Haystack, Needle [, ReplaceText, CaseSense, &OutputVarCount, Limit])",
        "body": "StrReplace(${1:Haystack}, ${2:SearchText [}, ${3:ReplaceText}, ${4:&OutputVarCount}, ${5:Limit := -1]})",
        "description": "Replaces the specified substring with a new string."
    },
    "StrTitle": {
        "prefix": "StrTitle(String)",
        "body": "StrTitle(${1:String})",
        "description": "Converts a string to title case."
    },
    "StrUpper": {
        "prefix": "StrUpper(String)",
        "body": "StrUpper(${1:String})",
        "description": "Converts a string to uppercase."
    },
    "SubStr()": {
        "prefix": "SubStr(String, StartingPos [, Length])",
        "body": "SubStr(${1:String}, ${2:StartingPos [}, ${3:Length]})",
        "description": "Retrieves one or more characters from the specified position in a string."
    },
    "Tan(Number)": {
        "prefix": "Tan(Number)",
        "body": "Tan(${1:Number})",
        "description": "Returns the trigonometric tangent of Number."
    },
    "TV.Add()": {
        "prefix": "TV.Add(Name, [ParentItemID, Options])",
        "body": ".Add(${1:Name}, ${2:[ParentItemID}, ${3|Options,\u200B,\"Bold\",\"Check\",\"Expand\",\"First\",\"N\",\"IconN\",\"Select\",\"Sort\",\"Vis\",\"VisFirst\"|})",
        "description": "Adds a new item to the TreeView and returns its unique Item ID number (or 0 upon failure)."
    },
    "TV.Delete()": {
        "prefix": "TV.Delete([ItemID])",
        "body": ".Delete(${1:[ItemID]})",
        "description": "Deletes the specified item or all items."
    },
    "TV.GetChild()": {
        "prefix": "TV.GetChild(ParentItemID)",
        "body": ".GetChild(${1:ParentItemID})",
        "description": "Returns the ID number of the specified item\"s first/top child (or 0 if none)."
    },
    "TV.GetCount()": {
        "prefix": "TV.GetCount()",
        "body": ".GetCount()",
        "description": "Returns the total number of items in the control."
    },
    "TV.GetNext()": {
        "prefix": "TV.GetNext([ItemID, ItemType])",
        "body": ".GetNext(${1:ItemID}, ${2|\"Checked\",\"Full\"|})",
        "description": "Returns the ID number of the next item below the specified item (or 0 if none)."
    },
    "TV.Get()": {
        "prefix": "TV.Get(ItemID, Attribute)",
        "body": ".Get(${1:ItemID}, ${2|Attribute,\"Expand\",\"Check\",\"Bold\"|})",
        "description": "Returns the ID number of the specified item if it has the specified attribute."
    },
    "TV.GetParent()": {
        "prefix": "TV.GetParent(ItemID)",
        "body": ".GetParent(${1:ItemID})",
        "description": "Returns the specified item\"s parent as an item ID."
    },
    "TV.GetPrev()": {
        "prefix": "TV.GetPrev(ItemID)",
        "body": ".GetPrev(${1:ItemID})",
        "description": "Returns the ID number of the sibling above the specified item (or 0 if none)."
    },
    "TV.GetSelection()": {
        "prefix": "TV.GetSelection()",
        "body": ".GetSelection()",
        "description": "Returns the selected item\"s ID number."
    },
    "TV.GetText()": {
        "prefix": "TV.GetText(ItemID)",
        "body": ".GetText(${1ItemID})",
        "description": "Retrieves the text/name of the specified item."
    },
    "TV.Modify()": {
        "prefix": "TV.Modify(ItemID [, Options, NewName])",
        "body": ".Modify(${1:ItemID [}, ${2|Options,\u200B,\"Bold\",\"Check\",\"Expand\",\"First\",\"N\",\"IconN\",\"Select\",\"Sort\",\"Vis\",\"VisFirst\"|}, ${3:NewName]})",
        "description": "Modifies the attributes and/or name of an item."
    },
    "WinActive()": {
        "prefix": "WinActive([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinActive(\"${1:WinTitle}\" [, \"${2:WinText}\", \"${3:ExcludeTitle}\", \"${4:ExcludeText}\"])",
        "description": "Checks if the specified window exists and is currently active (foremost). If it is, WinActive() returns its Unique ID (HWND)."
    },
    "WinExist()": {
        "prefix": "WinExist([WinTitle, WinText, ExcludeTitle, ExcludeText])",
        "body": "WinExist(\"${1:WinTitle}\" [, \"${2:WinText}\", \"${3:ExcludeTitle}\", \"${4:ExcludeText}\"])",
        "description": "Checks if a matching window exists. If it is, WinExist() returns the Unique ID (HWND) of the first matching window."
    },
    "FileObj.Read()": {
        "prefix": "FileObj.Read(Characters)",
        "body": ".Read(${1:[Characters]})"
    },
    "FileObj.Write()": {
        "prefix": "FileObj.Write(String)",
        "body": ".Write(${1:String})"
    },
    "FileObj.ReadLine()": {
        "prefix": "FileObj.ReadLine()",
        "body": ".ReadLine()"
    },
    "FileObj.WriteLine()": {
        "prefix": "FileObj.WriteLine(String)",
        "body": ".WriteLine(${1:[String]})"
    },
    "FileObj.ReadUInt()": {
        "prefix": "FileObj.ReadUInt()",
        "body": ".ReadUInt()"
    },
    "FileObj.ReadInt()": {
        "prefix": "FileObj.ReadInt()",
        "body": ".ReadInt()"
    },
    "FileObj.ReadInt64()": {
        "prefix": "FileObj.ReadInt64()",
        "body": ".ReadInt64()"
    },
    "FileObj.ReadShort()": {
        "prefix": "FileObj.ReadShort()",
        "body": ".ReadShort()"
    },
    "FileObj.ReadUShort()": {
        "prefix": "FileObj.ReadUShort()",
        "body": ".ReadUShort()"
    },
    "FileObj.ReadChar()": {
        "prefix": "FileObj.ReadChar()",
        "body": ".ReadChar()"
    },
    "FileObj.ReadUChar()": {
        "prefix": "FileObj.ReadUChar()",
        "body": "ReadUChar()"
    },
    "FileObj.ReadDouble()": {
        "prefix": "FileObj.ReadDouble()",
        "body": ".ReadDouble()"
    },
    "FileObj.ReadFloat()": {
        "prefix": "FileObj.ReadFloat()",
        "body": ".ReadFloat()"
    },
    "FileObj.WriteUInt()": {
        "prefix": "FileObj.WriteUInt(Num)",
        "body": ".WriteUInt(${1:Num})"
    },
    "FileObj.WriteInt()": {
        "prefix": "FileObj.WriteInt(Num)",
        "body": ".WriteInt(${1:Num})"
    },
    "FileObj.WriteInt64()": {
        "prefix": "FileObj.WriteInt64(Num)",
        "body": ".WriteInt64(${1:Num})"
    },
    "FileObj.WriteShort()": {
        "prefix": "FileObj.WriteShort(Num)",
        "body": ".WriteShort(${1:Num})"
    },
    "FileObj.WriteUShort()": {
        "prefix": "FileObj.WriteUShort(Num)",
        "body": ".WriteUShort(${1:Num})"
    },
    "FileObj.WriteChar()": {
        "prefix": "FileObj.WriteChar(Num)",
        "body": ".WriteChar(${1:Num})"
    },
    "FileObj.WriteUChar()": {
        "prefix": "FileObj.WriteUChar(Num)",
        "body": ".WriteUChar(${1:Num})"
    },
    "FileObj.WriteDouble()": {
        "prefix": "FileObj.WriteDouble(Num)",
        "body": ".WriteDouble(${1:Num})"
    },
    "FileObj.WriteFloat()": {
        "prefix": "FileObj.WriteFloat(Num)",
        "body": ".WriteFloat(${1:Num})"
    },
    "FileObj.RawRead()": {
        "prefix": "FileObj.RawRead(Buffer [, Bytes])",
        "body": ".RawRead(${1:VarOrAddress}, ${2:Bytes})",
        "description": "Reads raw binary data from the file into memory and advances the file pointer."
    },
    "FileObj.RawWrite()": {
        "prefix": "FileObj.RawWrite(Buffer [, Bytes])",
        "body": ".RawWrite(${1:VarOrAddress}, ${2:Bytes})"
    },
    "FileObj.Seek()": {
        "prefix": "FileObj.Seek(Distance [, Origin := 0])",
        "body": ".Seek(${1:Distance}, ${2:[Origin = 0]})",
        "description": "Writes raw binary data to the file and advances the file pointer."
    },
    "FileObj.Close()": {
        "prefix": "FileObj.Close()",
        "body": ".Close()"
    },
    "MapObj.Delete()": {
        "prefix": "MapObj.Delete(Key)",
        "body": ".Delete(${1:Key})",
		"description": "Removes all key-value pairs from the map."
    },
    "MapObj.Clear()": {
		"prefix": "MapObj.Clear()",
        "body": ".Clear()",
        "description": "Removes a key-value pair from the map."
    },
	"MapObj.Clone()": {
		"prefix": "MapObj.Clone()",
		"body": ".Clone()",
		"description": "Returns a shallow copy of the object."
	},
    "MapObj.Get()": {
		"prefix": "MapObj.Get(Key [, Default])",
        "body": ".Has(${1:Key}, ${2:Default})",
        "description": "Returns the value associated with a key, or a default value."
    },
	"MapObj.Has()()": {
		"prefix": "MapObj.Has(Index)",
		"body": ".Has(${1:Index})",
		"description": "Returns true if Key has an associated value within the map, otherwise false."
	},
    "MapObj.Set()": {
        "prefix": "MapObj.Get([Key, Value, Key2, Value2, ...])",
        "body": ".Has(${1:Key}, ${2:Value})",
        "description": "Sets zero or more items."
    },
    "MapObj.Count": {
		"prefix": "MapObj.Count",
        "body": ".Count",
        "description": "Retrieves the number of key-value pairs present in the map."
    },
    "MapObj.Capacity": {
		"prefix": "MapObj.Capacity",
        "body": ".Capacity",
        "description": "Retrieves or sets the current capacity of the map."
    },
    "MapObj.CaseSense": {
		"prefix": "MapObj.CaseSense",
        "body": ".CaseSense",
        "description": "Retrieves or sets the map's case sensitivity setting."
    },
    "MapObj.Default": {
		"prefix": "MapObj.Default",
        "body": ".Default",
        "description": "Defines the default value returned when a key is not found."
    },
    "MapObj.Length": {
        "prefix": "MapObj.Length",
        "body": ".Length"
    },
    "MapObj.__New()": {
		"prefix": "MapObj.__New([Key, Value, Key2, Value2, ...])",
        "body": ".__New(${1:Key}, ${2:Value})",
        "description": "Sets items. Equivalent to Set."
    },
	"Array()": {
		"prefix": "Array([Value, Value2, ..., ValueN])",
		"body": "Array(${1:Values...})",
		"description": "Creates a new Array containing the specified values."
	},
	"ArrayObj.Clone()": {
		"prefix": "ArrayObj.Clone()",
		"body": ".Clone()",
		"description": "Returns a shallow copy of the object."
	},
	"ArrayObj.Delete()": {
		"prefix": "ArrayObj.Delete()",
		"body": ".Delete()",
		"description": "Removes the value of an array element, leaving the index without a value."
	},
	"ArrayObj.Has()": {
		"prefix": "ArrayObj.Has(Index)",
		"body": ".Has(${1:Index})",
		"description": "Returns true if Index is valid and there is a value at that position, otherwise false."
	},
	"ArrayObj.InsertAt()": {
		"prefix": "ArrayObj.InsertAt(Index, Value1 , Value2, ... ValueN)",
		"body": ".InsertAt(${1:Index}, ${2:Values...})",
		"description": "Inserts one or more values at a given position."
	},
    "ArrayObj.Pop()": {
		"prefix": "ArrayObj.Pop()",
        "body": ".Pop()",
        "description": "Removes and returns the last array element."
    },
	"ArrayObj.Push()": {
		"prefix": "ArrayObj.Push([Value, Value2, ..., ValueN])",
		"body": ".Push(${1:Values...})",
		"description": "Appends values to the end of an array."
	},
	"ArrayObj.RemoveAt()": {
		"prefix": "ArrayObj.RemoveAt(Index, Length)",
		"body": ".RemoveAt(${1:Index}, ${2:Length})",
		"description": "Inserts one or more values at a given position."
	},
	"ArrayObj.__New()": {
		"prefix": "ArrayObj.__New([Value, Value2, ..., ValueN])",
		"body": ".__New(${1:Values...})",
		"description": "Appends items. Equivalent to Push."
	},
    "ArrayObj.Length": {
        "prefix": "ArrayObj.Length",
        "body": ".Length"
    },
    "ArrayObj.Capacity": {
        "prefix": "ArrayObj.Capacity",
        "body": ".Capacity"
    },
    "ClassObj.__Get()": {
        "prefix": "ClassObj.__Get(Name, Params)",
        "body": ".__Get(${1:[Name}, ${2:Params...})"
    },
    "ClassObj.__Set()": {
        "prefix": "ClassObj.__Set(Name, Params, Value)",
        "body": ".__Set(${1:[Name}, ${2:Params...}, ${4:Value})"
    },
    "ClassObj.__Call()": {
        "prefix": ".__Call([Name, Params...])",
        "body": ".__Call(${1:Name}, ${2:[Params...]})"
    },
    "ClassObj.__New()": {
        "prefix": "ClassObj.__New()",
        "body": ".__New(${1:})"
    },
    "ClassObj.__Delete()": {
        "prefix": "ClassObj.__Delete()",
        "body": ".__Delete(${1:})"
    },
    "FileObj.AtEOF": {
        "prefix": "FileObj.AtEOF",
        "body": ".AtEOF"
    },
    "FileObj.Encoding": {
        "prefix": "FileObj.Encoding",
        "body": ".Encoding"
    },
    "FileObj.Handle": {
        "prefix": "FileObj.Handle",
        "body": ".Handle"
    },
    "FuncObj.Name": {
        "prefix": "FuncObj.Name",
        "body": ".Name"
    },
    "FuncObj.IsBuiltIn": {
        "prefix": "FuncObj.IsBuiltIn",
        "body": ".IsBuiltIn"
    },
	"FuncObj.IsOptional()": {
		"prefix": "FuncObj.IsOptional([ParamIndex])",
        "body": ".IsOptional(${1:ParamIndex})",
        "description": "Determines whether a parameter is optional.."
    },
	"FuncObj.IsByRef()": {
		"prefix": "FuncObj.IsByRef([ParamIndex])",
        "body": ".IsByRef(${1:ParamIndex})",
        "description": "Determines whether a parameter is ByRef."
    },
    "FuncObj.IsVariadic": {
        "prefix": "FuncObj.IsVariadic",
        "body": ".IsVariadic"
    },
    "FuncObj.MinParams": {
        "prefix": "FuncObj.MinParams",
        "body": ".MinParams"
    },
    "FuncObj.Bind()": {
        "prefix": "FuncObj.Bind([Params...])",
        "body": ".Bind($1)",
		"description": "Binds parameters to the function and returns a BoundFunc object."
    },
    "FuncObj.MaxParams": {
        "prefix": "FuncObj.MaxParams",
        "body": ".MaxParams"
    },
    "FileObj.Pos": {
        "prefix": "FileObj.Pos",
        "body": ".Pos"
    },
    "A_AhkPath": {
        "prefix": "A_AhkPath",
        "body": "A_AhkPath",
        "description": "For non-compiled or embedded scripts: The full path and name of the EXE file that is actually running the current script.\r\n For example: C:\Program Files\AutoHotkey\AutoHotkey.exe"
    },
    "A_AhkVersion": {
        "prefix": "A_AhkVersion",
        "body": "A_AhkVersion",
        "description": "Contains the version of AutoHotkey that is running the script, such as 1.0.22."
    },
    "A_AllowMainWindow": {
        "prefix": "A_AllowMainWindow",
        "body": "A_AllowMainWindow",
        "description": "Can be used to get or set whether the script's main window is allowed to be opened via the tray icon. Possible values are 0 (forbidden) and 1 (allowed)."
    },
    "A_AppData": {
        "prefix": "A_AppData",
        "body": "A_AppData",
        "description": "The full path and name of the folder containing the current user's application-specific data.\r\n For example: C:\Users\<UserName>\AppData\Roaming"
    },
    "A_AppDataCommon": {
        "prefix": "A_AppDataCommon",
        "body": "A_AppDataCommon",
        "description": "The full path and name of the folder containing the all-users application-specific data.\r\n For example: C:\ProgramData"
    },
    "A_Args": {
        "prefix": "A_Args",
        "body": "A_Args",
        "description": "Read/write: Contains an array of command line parameters. For details, see Passing Command Line Parameters to a Script.\r\n Example:\r\n for n, param in A_Args\r\n \tMsgBox(\"Parameter number \" n \" is \" param \".\")"
    },
    "A_ListLines": {
        "prefix": "A_ListLines",
        "body": "A_ListLines",
        "description": "Contains 1 if `ListLines` is enabled. Otherwise it contains 0."
    },
    "A_SendMode": {
        "prefix": "A_SendMode",
        "body": "A_SendMode",
        "description": "The current mode (Event, Input, Play or InputThenPlay) set by SendMode."
    },
    "A_SendLevel": {
        "prefix": "A_SendLevel",
        "body": "A_SendLevel",
        "description": "The current SendLevel setting (an integer between 0 and 100, inclusive)."
    },
    "A_StoreCapsLockMode": {
        "prefix": "A_StoreCapsLockMode",
        "body": "A_StoreCapsLockMode",
        "description": "The current mode (On or Off) set by SetStoreCapsLockMode."
    },
    "A_CoordModeToolTip": {
        "prefix": "A_CoordModeToolTip",
        "body": "A_CoordModeToolTip",
        "description": "The current mode (Window, Client or Screen) set by CoordMode."
    },
    "A_CoordModePixel": {
        "prefix": "A_CoordModePixel",
        "body": "A_CoordModePixel",
        "description": "The current mode (Window, Client or Screen) set by CoordMode."
    },
    "A_CoordModeMouse": {
        "prefix": "A_CoordModeMouse",
        "body": "A_CoordModeMouse",
        "description": "The current mode (Window, Client or Screen) set by CoordMode."
    },
    "A_CoordModeCaret": {
        "prefix": "A_CoordModeCaret",
        "body": "A_CoordModeCaret",
        "description": "The current mode (Window, Client or Screen) set by CoordMode."
    },
    "A_CoordModeMenu": {
        "prefix": "A_CoordModeMenu",
        "body": "A_CoordModeMenu",
        "description": "The current mode (Window, Client or Screen) set by CoordMode."
    },
    "A_TimeIdleKeyboard": {
        "prefix": "A_TimeIdleKeyboard",
        "body": "A_TimeIdleKeyboard",
        "description": "If the keyboard hook is installed, this is the number of milliseconds that have elapsed since the system last received physical keyboard input. Otherwise, this variable is equivalent to A_TimeIdle."
    },
    "A_TimeIdleMouse": {
        "prefix": "A_TimeIdleMouse",
        "body": "A_TimeIdleMouse",
        "description": "If the mouse hook is installed, this is the number of milliseconds that have elapsed since the system last received physical mouse input. Otherwise, this variable is equivalent to A_TimeIdle."
    },
    "A_DefaultGui": {
        "prefix": "A_DefaultGui",
        "body": "A_DefaultGui",
        "description": "The name or number of the current thread\"s default GUI."
    },
    "A_DefaultListView": {
        "prefix": "A_DefaultListView",
        "body": "A_DefaultListView",
        "description": "The variable name or HWND of the ListView control upon which the ListView functions operate. If the default GUI lacks a ListView, this variable is blank."
    },
    "A_DefaultTreeView ": {
        "prefix": "A_DefaultTreeView ",
        "body": "A_DefaultTreeView ",
        "description": "The variable name or HWND of the TreeView control upon which the TreeView functions operate. If the default GUI lacks a TreeView, this variable is blank."
    },
    "A_ComSpec ": {
        "prefix": "A_ComSpec ",
        "body": "A_ComSpec ",
        "description": "Contains the same string as the environment\"s ComSpec variable. Often used with Run/RunWait. For example: \n\n C:\\Windows\\system32\\cmd.exe"
    },
    "A_ComputerName": {
        "prefix": "A_ComputerName",
        "body": "A_ComputerName",
        "description": "The name of the computer as seen on the network."
    },
    "A_ControlDelay": {
        "prefix": "A_ControlDelay",
        "body": "A_ControlDelay",
        "description": "Can be used to get or set the delay for control-modifying functions, in milliseconds. For details, see SetControlDelay."
    },
    "A_Cursor": {
        "prefix": "A_Cursor",
        "body": "A_Cursor",
        "description": "The type of mouse cursor currently being displayed. It will be one of the following words: AppStarting, Arrow, Cross, Help, IBeam, Icon, No, Size, SizeAll, SizeNESW, SizeNS, SizeNWSE, SizeWE, UpArrow, Wait, Unknown. The acronyms used with the size-type cursors are compass directions, e.g. NESW = NorthEast+SouthWest. The hand-shaped cursors (pointing and grabbing) are classified as Unknown."
    },
    "A_Clipboard": {
        "prefix": "A_Clipboard",
        "body": "A_Clipboard",
        "description": "A_Clipboard is a built-in variable that reflects the current contents of the Windows clipboard if those contents can be expressed as text."
    },
    "A_DD": {
        "prefix": "A_DD",
        "body": "A_DD",
        "description": "Current 2-digit day of the month (01-31). Synonymous with A_MDay."
    },
    "A_DDD": {
        "prefix": "A_DDD",
        "body": "A_DDD",
        "description": "Current day of the week's abbreviation in the current user's language, e.g. Sun"
    },
    "A_DDDD": {
        "prefix": "A_DDDD",
        "body": "A_DDDD",
        "description": "Current day of the week's full name in the current user's language, e.g. Sunday"
    },
    "A_DefaultMouseSpeed": {
        "prefix": "A_DefaultMouseSpeed",
        "body": "A_DefaultMouseSpeed"
    },
    "A_Desktop": {
        "prefix": "A_Desktop",
        "body": "A_Desktop",
        "description": "The full path and name of the folder containing the current user\"s desktop files."
    },
    "A_DesktopCommon": {
        "prefix": "A_DesktopCommon",
        "body": "A_DesktopCommon"
    },
    "A_DetectHiddenText": {
        "prefix": "A_DetectHiddenText",
        "body": "A_DetectHiddenText"
    },
    "A_DetectHiddenWindows": {
        "prefix": "A_DetectHiddenWindows",
        "body": "A_DetectHiddenWindows"
    },
    "A_EndChar": {
        "prefix": "A_EndChar",
        "body": "A_EndChar"
    },
    "A_EventInfo": {
        "prefix": "A_EventInfo",
        "body": "A_EventInfo",
        "description": "Contains additional information about the following events:\r\n\t•Mouse wheel hotkeys (WheelDown/Up/Left/Right)\r\n\t•OnMessage\r\n\t•Regular Expression Callouts"
    },
    "A_FileEncoding": {
        "prefix": "A_FileEncoding",
        "body": "A_FileEncoding"
    },
    "A_Hour": {
        "prefix": "A_Hour",
        "body": "A_Hour"
    },
    "A_HotkeyInterval": {
        "prefix": "A_HotkeyInterval",
        "body": "A_HotkeyInterval"
    },
    "A_HotkeyModifierTimeout": {
        "prefix": "A_HotkeyModifierTimeout",
        "body": "A_HotkeyModifierTimeout"
    },
    "A_IconFile": {
        "prefix": "A_IconFile",
        "body": "A_IconFile"
    },
    "A_IconHidden": {
        "prefix": "A_IconHidden",
        "body": "A_IconHidden"
    },
    "A_IconNumber": {
        "prefix": "A_IconNumber",
        "body": "A_IconNumber"
    },
    "A_IconTip": {
        "prefix": "A_IconTip",
        "body": "A_IconTip"
    },
    "A_Index": {
        "prefix": "A_Index",
        "body": "A_Index"
    },
    "A_InitialWorkingDir": {
        "prefix": "A_InitialWorkingDir",
        "body": "A_InitialWorkingDir"
    },
    "A_Is64bitOS": {
        "prefix": "A_Is64bitOS",
        "body": "A_Is64bitOS",
        "description": "Contains 1 (true) if the OS is 64-bit or 0 (false) if it is 32-bit."
    },
    "A_IsAdmin": {
        "prefix": "A_IsAdmin",
        "body": "A_IsAdmin",
        "description": "If the current user has admin rights, this variable contains 1. Otherwise, it contains 0."
    },
    "A_IsCompiled": {
        "prefix": "A_IsCompiled",
        "body": "A_IsCompiled",
        "description": "Contains 1 if the script is running as a compiled EXE and an empty string (which is considered false) if it is not."
    },
    "A_IsCritical": {
        "prefix": "A_IsCritical",
        "body": "A_IsCritical",
        "description": "Contains 0 if Critical is off for the current thread. Otherwise it contains an integer greater than zero, namely the message-check frequency being used by Critical."
    },
    "A_IsPaused": {
        "prefix": "A_IsPaused",
        "body": "A_IsPaused",
        "description": "Contains 1 if the thread immediately underneath the current thread is paused. Otherwise it contains 0."
    },
    "A_IsSuspended": {
        "prefix": "A_IsSuspended",
        "body": "A_IsSuspended",
        "description": "Contains 1 if the script is suspended and 0 otherwise."
    },
    "A_KeyDelay": {
        "prefix": "A_KeyDelay",
        "body": "A_KeyDelay",
        "description": "The current delay or duration set by SetKeyDelay (always decimal, not hex). A_KeyDuration requires [v1.1.23+]."
    },
    "A_Language": {
        "prefix": "A_Language",
        "body": "A_Language",
        "description": "The system's default language."
    },
    "A_LastError": {
        "prefix": "A_LastError",
        "body": "A_LastError",
        "description": ""
    },
    "A_LineFile": {
        "prefix": "A_LineFile",
        "body": "A_LineFile",
        "description": "The full path and name of the file to which A_LineNumber belongs, which will be the same as A_ScriptFullPath unless the line belongs to one of a non-compiled script\"s #Include files."
    },
    "A_LineNumber": {
        "prefix": "A_LineNumber",
        "body": "A_LineNumber",
        "description": "The number of the currently executing line within the script (or one of its #Include files). This line number will match the one shown by ListLines; it can be useful for error reporting such as this example: MsgBox Could not write to log file (line number %A_LineNumber%)."
    },
    "A_LoopField": {
        "prefix": "A_LoopField",
        "body": "A_LoopField",
        "description": ""
    },
    "A_LoopFileAttrib": {
        "prefix": "A_LoopFileAttrib",
        "body": "A_LoopFileAttrib",
        "description": "The attributes of the file currently retrieved.\r\n\t•R = READONLY\r\n\t•A = ARCHIVE\r\n\t•S = SYSTEM\r\n\t•H = HIDDEN\r\n\t•N = NORMAL\r\n\t•D = DIRECTORY\r\n\t•O = OFFLINE\r\n\t•C = COMPRESSED\r\n\t•T = TEMPORARY"
    },
    "A_LoopFileDir": {
        "prefix": "A_LoopFileDir",
        "body": "A_LoopFileDir",
        "description": "The path of the directory in which A_LoopFileName resides. \r\nIf FilePattern contains a relative path rather than an absolute path,\r\n the path here will also be relative. \r\nA root directory will not contain a trailing backslash. \r\n For example: C:"
    },
    "A_LoopFileExt": {
        "prefix": "A_LoopFileExt",
        "body": "A_LoopFileExt",
        "description": "The file\"s extension (e.g. TXT, DOC, or EXE). The period (.) is not included."
    },
    "A_LoopFileFullPath": {
        "prefix": "A_LoopFileFullPath",
        "body": "A_LoopFileFullPath",
        "description": "The path and name of the file/folder currently retrieved. If FilePattern contains a relative path rather than an absolute path, the path here will also be relative. In addition, any short (8.3) folder names in FilePattern will still be short (see next item to get the long version)."
    },
    "A_LoopFilePath": {
        "prefix": "A_LoopFilePath",
        "body": "A_LoopFilePath",
        "description": "The path and name of the file/folder currently retrieved. If FilePattern contains a relative path rather than an absolute path, the path here will also be relative. In addition, any short (8.3) folder names in FilePattern will still be short (see next item to get the long version)."
    },
    "A_LoopFileLongPath": {
        "prefix": "A_LoopFileLongPath",
        "body": "A_LoopFileLongPath",
        "description": "This is different than A_LoopFileFullPath in the following ways: 1) It always contains the absolute/complete path of the file even if FilePattern contains a relative path; 2) Any short (8.3) folder names in FilePattern itself are converted to their long names; 3) Characters in FilePattern are converted to uppercase or lowercase to match the case stored in the file system. This is useful for converting file names -- such as those passed into a script as command line parameters -- to their exact path names as shown by Explorer."
    },
    "A_LoopFileName": {
        "prefix": "A_LoopFileName",
        "body": "A_LoopFileName",
        "description": "The name of the file or folder currently retrieved (without the path)."
    },
    "A_LoopFileShortName": {
        "prefix": "A_LoopFileShortName",
        "body": "A_LoopFileShortName",
        "description": "The 8.3 short name, or alternate name of the file."
    },
    "A_LoopFileShortPath": {
        "prefix": "A_LoopFileShortPath",
        "body": "A_LoopFileShortPath",
        "description": "The 8.3 short path and name of the file/folder currently retrieved."
    },
    "A_LoopFileSize": {
        "prefix": "A_LoopFileSize",
        "body": "A_LoopFileSize",
        "description": "The size in bytes of the file currently retrieved. Files larger than 4 gigabytes are also supported."
    },
    "A_LoopFileSizeKB": {
        "prefix": "A_LoopFileSizeKB",
        "body": "A_LoopFileSizeKB",
        "description": " The size in Kbytes of the file currently retrieved, rounded down to the nearest integer. "
    },
    "A_LoopFileSizeMB": {
        "prefix": "A_LoopFileSizeMB",
        "body": "A_LoopFileSizeMB",
        "description": "The size in Mbytes of the file currently retrieved, rounded down to the nearest integer."
    },
    "A_LoopFileTimeAccessed": {
        "prefix": "A_LoopFileTimeAccessed",
        "body": "A_LoopFileTimeAccessed",
        "description": "The time the file was last accessed. Format YYYYMMDDHH24MISS."
    },
    "A_LoopFileTimeCreated": {
        "prefix": "A_LoopFileTimeCreated",
        "body": "A_LoopFileTimeCreated",
        "description": "The time the file was created. Format YYYYMMDDHH24MISS."
    },
    "A_LoopFileTimeModified": {
        "prefix": "A_LoopFileTimeModified",
        "body": "A_LoopFileTimeModified"
    },
    "A_LoopReadLine": {
        "prefix": "A_LoopReadLine",
        "body": "A_LoopReadLine"
    },
    "A_LoopRegKey": {
        "prefix": "A_LoopRegKey",
        "body": "A_LoopRegKey",
        "description": " The type of the currently retrieved item, which is one of the following words: KEY (i.e. the currently retrieved item is a subkey not a value), \r\nREG_SZ, REG_EXPAND_SZ, REG_MULTI_SZ, REG_DWORD, REG_QWORD, REG_BINARY, REG_LINK, REG_RESOURCE_LIST, REG_FULL_RESOURCE_DESCRIPTOR, REG_RESOURCE_REQUIREMENTS_LIST, REG_DWORD_BIG_ENDIAN (probably rare on most Windows hardware). It will be empty if the currently retrieved item is of an unknown type. "
    },
    "A_LoopRegName": {
        "prefix": "A_LoopRegName",
        "body": "A_LoopRegName"
    },
    "A_LoopRegTimeModified": {
        "prefix": "A_LoopRegTimeModified",
        "body": "A_LoopRegTimeModified"
    },
    "A_LoopRegType": {
        "prefix": "A_LoopRegType",
        "body": "A_LoopRegType",
        "description": ""
    },
	"A_MaxHotkeysPerInterval": {
		"prefix": "A_MaxHotkeysPerInterval",
		"body": "A_MaxHotkeysPerInterval",
		"description": "Current 2-digit minute (00-59)."
	},
    "A_MDay": {
        "prefix": "A_MDay",
        "body": "A_MDay",
        "description": "Current 2-digit day of the month (01-31). Synonymous with A_DD."
    },
    "A_MenuMaskKey": {
        "prefix": "A_MenuMaskKey",
        "body": "A_MenuMaskKey",
        "description": "Controls which key is used to mask Win or Alt keyup events."
    },
    "A_Min": {
        "prefix": "A_Min",
        "body": "A_Min",
        "description": "Current 2-digit minute (00-59)."
    },
    "A_MM": {
        "prefix": "A_MM",
        "body": "A_MM",
        "description": "Current 2-digit month (01-12). Synonymous with A_Mon."
    },
    "A_MMM": {
        "prefix": "A_MMM",
        "body": "A_MMM",
        "description": "Current month\"s abbreviation in the current user\"s language, e.g. Jul"
    },
    "A_MMMM": {
        "prefix": "A_MMMM",
        "body": "A_MMMM",
        "description": "Current month\"s full name in the current user\"s language, e.g. July"
    },
    "A_Mon": {
        "prefix": "A_Mon",
        "body": "A_Mon",
        "description": "Current 2-digit month (01-12)."
    },
    "A_MouseDelay": {
        "prefix": "A_MouseDelay",
        "body": "A_MouseDelay",
        "description": "Can be used to get or set the mouse delay, in milliseconds."
    },
    "A_MouseDelayPlay": {
        "prefix": "A_MouseDelayPlay",
        "body": "A_MouseDelayPlay",
        "description": "Can be used to get or set the mouse delay for SendPlay, in milliseconds."
    },
    "A_MSec": {
        "prefix": "A_MSec",
        "body": "A_MSec",
        "description": "Current 3-digit millisecond (000-999)."
    },
    "A_MyDocuments": {
        "prefix": "A_MyDocuments",
        "body": "A_MyDocuments",
        "description": "The full path and name of the current user\"s \"My Documents\" folder. Unlike most of the similar variables, if the folder is the root of a drive, the final backslash is not included"
    },
    "A_Now": {
        "prefix": "A_Now",
        "body": "A_Now",
        "description": "The current local time in YYYYMMDDHH24MISS format."
    },
    "A_NowUTC": {
        "prefix": "A_NowUTC",
        "body": "A_NowUTC",
        "description": "The current Coordinated Universal Time (UTC) in YYYYMMDDHH24MISS format. UTC is essentially the same as Greenwich Mean Time (GMT)."
    },
    "A_NumBatchLines": {
        "prefix": "A_NumBatchLines",
        "body": "A_NumBatchLines",
        "description": ""
    },
    "A_OSVersion": {
        "prefix": "A_OSVersion",
        "body": "A_OSVersion",
        "description": ""
    },
    "A_PriorHotkey": {
        "prefix": "A_PriorHotkey",
        "body": "A_PriorHotkey",
        "description": ""
    },
    "A_PriorKey": {
        "prefix": "A_PriorKey",
        "body": "A_PriorKey",
        "description": "The name of the last key which was pressed prior to the most recent key-press or key-release, or blank if no applicable key-press can be found in the key history. All input generated by AutoHotkey scripts is excluded. For this variable to be of use, the keyboard or mouse hook must be installed and key history must be enabled."
    },
    "A_ProgramFiles": {
        "prefix": "A_ProgramFiles",
        "body": "A_ProgramFiles",
        "description": "The Program Files directory."
    },
    "A_Programs": {
        "prefix": "A_Programs",
        "body": "A_Programs",
        "description": "The full path and name of the Programs folder in the current user\"s Start Menu."
    },
    "A_ProgramsCommon": {
        "prefix": "A_ProgramsCommon",
        "body": "A_ProgramsCommon",
        "description": "The full path and name of the Programs folder in the all-users Start Menu."
    },
    "A_PtrSize": {
        "prefix": "A_PtrSize",
        "body": "A_PtrSize",
        "description": ""
    },
    "A_RegView": {
        "prefix": "A_RegView",
        "body": "A_RegView",
        "description": "The current registry view as set by SetRegView."
    },
    "A_ScreenDPI": {
        "prefix": "A_ScreenDPI",
        "body": "A_ScreenDPI",
        "description": "Number of pixels per logical inch along the screen width."
    },
    "A_ScreenHeight": {
        "prefix": "A_ScreenHeight",
        "body": "A_ScreenHeight",
        "description": "The height of the primary monitor"
    },
    "A_ScreenWidth": {
        "prefix": "A_ScreenWidth",
        "body": "A_ScreenWidth",
        "description": "The width of the primary monitor"
    },
    "A_ScriptDir": {
        "prefix": "A_ScriptDir",
        "body": "A_ScriptDir",
        "description": "The full path of the directory where the current script is located. The final backslash is omitted (even for root directories)."
    },
    "A_ScriptFullPath": {
        "prefix": "A_ScriptFullPath",
        "body": "A_ScriptFullPath",
        "description": "The full path of the current script"
    },
    "A_ScriptHwnd": {
        "prefix": "A_ScriptHwnd",
        "body": "A_ScriptHwnd",
        "description": "The unique ID (HWND/handle) of the script\"s hidden main window."
    },
    "A_ScriptName": {
        "prefix": "A_ScriptName",
        "body": "A_ScriptName",
        "description": "The file name of the current script, without its path, e.g. MyScript.ahk. "
    },
    "A_Sec": {
        "prefix": "A_Sec",
        "body": "A_Sec",
        "description": "Current 2-digit second (00-59)."
    },
    "A_Space": {
        "prefix": "A_Space",
        "body": "A_Space",
        "description": "This variable contains a single space character. See AutoTrim for details."
    },
    "A_StartMenu": {
        "prefix": "A_StartMenu",
        "body": "A_StartMenu",
        "description": "The full path and name of the current user\"s Start Menu folder"
    },
    "A_StartMenuCommon": {
        "prefix": "A_StartMenuCommon",
        "body": "A_StartMenuCommon",
        "description": "The full path and name of the all-users Start Menu folder."
    },
    "A_Startup": {
        "prefix": "A_Startup",
        "body": "A_Startup",
        "description": "The full path and name of the Startup folder in the current user\"s Start Menu."
    },
    "A_StartupCommon": {
        "prefix": "A_StartupCommon",
        "body": "A_StartupCommon",
        "description": "The full path and name of the Startup folder in the all-users Start Menu."
    },
    "A_Tab": {
        "prefix": "A_Tab",
        "body": "A_Tab"
    },
    "A_Temp": {
        "prefix": "A_Temp",
        "body": "A_Temp",
        "description": "The full path and name of the folder designated to hold temporary files."
    },
    "A_ThisFunc": {
        "prefix": "A_ThisFunc",
        "body": "A_ThisFunc",
        "description": "The name of the user-defined function that is currently executing (blank if none)"
    },
    "A_ThisHotkey": {
        "prefix": "A_ThisHotkey",
        "body": "A_ThisHotkey",
        "description": "The most recently executed hotkey or non-auto-replace hotstring (blank if none), e.g. #z.\n\r This value will change if the current thread is interrupted by another hotkey or hotstring, so it is generally better to use the parameter ThisHotkey when available."
    },
    "A_TickCount": {
        "prefix": "A_TickCount",
        "body": "A_TickCount",
        "description": "The number of milliseconds that have elapsed since the system was started, up to 49.7 days."
    },
    "A_TimeIdle": {
        "prefix": "A_TimeIdle",
        "body": "A_TimeIdle",
        "description": "The number of milliseconds that have elapsed since the system last received keyboard, mouse, or other input."
    },
    "A_TimeIdlePhysical": {
        "prefix": "A_TimeIdlePhysical",
        "body": "A_TimeIdlePhysical",
        "description": "The number of milliseconds that have elapsed since the system last received physical keyboard, mouse, or other input."
    },
    "A_TimeSincePriorHotkey": {
        "prefix": "A_TimeSincePriorHotkey",
        "body": "A_TimeSincePriorHotkey"
    },
    "A_TimeSinceThisHotkey": {
        "prefix": "A_TimeSinceThisHotkey",
        "body": "A_TimeSinceThisHotkey"
    },
    "A_TitleMatchMode": {
        "prefix": "A_TitleMatchMode",
        "body": "A_TitleMatchMode",
        "description": "Can be used to get or set the title match mode. Possible values are 1, 2, 3 and RegEx.\r\n\t•1 = A window's title must start with the specified WinTitle to be a match.\r\n\t•2 = A window's title can contain WinTitle anywhere inside it to be a match.\r\n\t•3 = A window's title must exactly match WinTitle to be a match.\r\n\t•RegEx = Changes WinTitle, WinText, ExcludeTitle, and ExcludeText to accept regular expressions."
    },
    "A_TitleMatchModeSpeed": {
        "prefix": "A_TitleMatchModeSpeed",
        "body": "A_TitleMatchModeSpeed"
    },
    "A_TitleMatchModeSpeed": {
        "prefix": "A_TitleMatchModeSpeed",
        "body": "A_TitleMatchModeSpeed"
    },
    "A_TrayMenu": {
        "prefix": "A_TrayMenu",
        "body": "A_TrayMenu",
        "description": "Returns a Menu object which can be used to modify or display the tray menu."
    },
    "A_WDay": {
        "prefix": "A_WDay",
        "body": "A_WDay",
        "description": "Current 1-digit day of the week (1-7). 1 is Sunday in all locales."
    },
    "A_WinDelay": {
        "prefix": "A_WinDelay",
        "body": "A_WinDelay"
    },
    "A_WinDir": {
        "prefix": "A_WinDir",
        "body": "A_WinDir",
        "description": "The Windows directory. For example: C:\\Windows"
    },
    "A_WorkingDir": {
        "prefix": "A_WorkingDir",
        "body": "A_WorkingDir",
        "description": "The Windows directory. For example: C:\\Windows"
    },
    "A_YDay": {
        "prefix": "A_YDay",
        "body": "A_YDay",
        "description": "Current day of the year (1-366). The value is not zero-padded, e.g. 9 is retrieved, not 009. To retrieve a zero-padded value, use the following: FormatTime(, "YDay0")."
    },
    "A_Year": {
        "prefix": "A_Year",
        "body": "A_Year",
        "description": "Current 4-digit year (e.g. 2004). Synonymous with A_Year."
    },
    "A_YWeek": {
        "prefix": "A_YWeek",
        "body": "A_YWeek",
        "description": "Current year and week number (e.g. 200453) according to ISO 8601. To separate the year from the week, use Year := SubStr(A_YWeek, 1, 4) and Week := SubStr(A_YWeek, -2). Precise definition of A_YWeek: If the week containing January 1st has four or more days in the new year, it is considered week 1. Otherwise, it is the last week of the previous year, and the next week is week 1."
    },
    "A_YYYY": {
        "prefix": "A_YYYY",
        "body": "A_YYYY",
        "description": "Current 4-digit year (e.g. 2004). Synonymous with A_Year."
    },
    "ErrorLevel": {
        "prefix": "ErrorLevel",
        "body": "ErrorLevel",
        "description": "This is a built-in variable that is set to indicate the success or failure of some of the commands (not all commands change the value of ErrorLevel). A value of 0 usually indicates success, and any other value usually indicates failure. You can also set the value of ErrorLevel yourself.\nOf special interest is that RunWait sets ErrorLevel to be the exit code of the program it ran. Most programs yield an exit code of zero if they completed successfully.\nEach thread retains its own value of ErrorLevel, meaning that if the current thread is interrupted by another, when the original thread is resumed it will still have its original value of ErrorLevel, not the ErrorLevel that may have been set by the interrupting thread."
    },
    "True": {
        "prefix": "True",
        "body": "True"
    },
    "False": {
        "prefix": "False",
        "body": "False"
    },
    "Shift": {
        "prefix": "Shift",
        "body": "Shift"
    },
    "LShift": {
        "prefix": "LShift",
        "body": "LShift"
    },
    "RShift": {
        "prefix": "RShift",
        "body": "RShift"
    },
    "Alt": {
        "prefix": "Alt",
        "body": "Alt"
    },
    "LAlt": {
        "prefix": "LAlt",
        "body": "LAlt"
    },
    "RAlt": {
        "prefix": "RAlt",
        "body": "RAlt"
    },
    "LControl": {
        "prefix": "LControl",
        "body": "LControl"
    },
    "RControl": {
        "prefix": "RControl",
        "body": "RControl"
    },
    "Ctrl": {
        "prefix": "Ctrl",
        "body": "Ctrl"
    },
    "LCtrl": {
        "prefix": "LCtrl",
        "body": "LCtrl"
    },
    "RCtrl": {
        "prefix": "RCtrl",
        "body": "RCtrl"
    },
    "LWin": {
        "prefix": "LWin",
        "body": "LWin"
    },
    "RWin": {
        "prefix": "RWin",
        "body": "RWin"
    },
    "AppsKey": {
        "prefix": "AppsKey",
        "body": "AppsKey"
    },
    "AltDown": {
        "prefix": "AltDown",
        "body": "AltDown"
    },
    "AltUp": {
        "prefix": "AltUp",
        "body": "AltUp"
    },
    "ShiftDown": {
        "prefix": "ShiftDown",
        "body": "ShiftDown"
    },
    "ShiftUp": {
        "prefix": "ShiftUp",
        "body": "ShiftUp"
    },
    "CtrlDown": {
        "prefix": "CtrlDown",
        "body": "CtrlDown"
    },
    "CtrlUp": {
        "prefix": "CtrlUp",
        "body": "CtrlUp"
    },
    "LWinDown": {
        "prefix": "LWinDown",
        "body": "LWinDown"
    },
    "LWinUp": {
        "prefix": "LWinUp",
        "body": "LWinUp"
    },
    "RWinDown": {
        "prefix": "RWinDown",
        "body": "RWinDown"
    },
    "RWinUp": {
        "prefix": "RWinUp",
        "body": "RWinUp"
    },
    "LButton": {
        "prefix": "LButton",
        "body": "LButton"
    },
    "RButton": {
        "prefix": "RButton",
        "body": "RButton"
    },
    "MButton": {
        "prefix": "MButton",
        "body": "MButton"
    },
    "WheelUp": {
        "prefix": "WheelUp",
        "body": "WheelUp"
    },
    "WheelDown": {
        "prefix": "WheelDown",
        "body": "WheelDown"
    },
    "WheelLeft": {
        "prefix": "WheelLeft",
        "body": "WheelLeft"
    },
    "WheelRight": {
        "prefix": "WheelRight",
        "body": "WheelRight"
    },
    "XButton1": {
        "prefix": "XButton1",
        "body": "XButton1"
    },
    "XButton2": {
        "prefix": "XButton2",
        "body": "XButton2"
    },
    "Joy1": {
        "prefix": "Joy1",
        "body": "Joy1"
    },
    "Joy2": {
        "prefix": "Joy2",
        "body": "Joy2"
    },
    "Joy3": {
        "prefix": "Joy3",
        "body": "Joy3"
    },
    "Joy4": {
        "prefix": "Joy4",
        "body": "Joy4"
    },
    "Joy5": {
        "prefix": "Joy5",
        "body": "Joy5"
    },
    "Joy6": {
        "prefix": "Joy6",
        "body": "Joy6"
    },
    "Joy7": {
        "prefix": "Joy7",
        "body": "Joy7"
    },
    "Joy8": {
        "prefix": "Joy8",
        "body": "Joy8"
    },
    "Joy9": {
        "prefix": "Joy9",
        "body": "Joy9"
    },
    "Joy10": {
        "prefix": "Joy10",
        "body": "Joy10"
    },
    "Joy11": {
        "prefix": "Joy11",
        "body": "Joy11"
    },
    "Joy12": {
        "prefix": "Joy12",
        "body": "Joy12"
    },
    "Joy13": {
        "prefix": "Joy13",
        "body": "Joy13"
    },
    "Joy14": {
        "prefix": "Joy14",
        "body": "Joy14"
    },
    "Joy15": {
        "prefix": "Joy15",
        "body": "Joy15"
    },
    "Joy16": {
        "prefix": "Joy16",
        "body": "Joy16"
    },
    "Joy17": {
        "prefix": "Joy17",
        "body": "Joy17"
    },
    "Joy18": {
        "prefix": "Joy18",
        "body": "Joy18"
    },
    "Joy19": {
        "prefix": "Joy19",
        "body": "Joy19"
    },
    "Joy20": {
        "prefix": "Joy20",
        "body": "Joy20"
    },
    "Joy21": {
        "prefix": "Joy21",
        "body": "Joy21"
    },
    "Joy22": {
        "prefix": "Joy22",
        "body": "Joy22"
    },
    "Joy23": {
        "prefix": "Joy23",
        "body": "Joy23"
    },
    "Joy24": {
        "prefix": "Joy24",
        "body": "Joy24"
    },
    "Joy25": {
        "prefix": "Joy25",
        "body": "Joy25"
    },
    "Joy26": {
        "prefix": "Joy26",
        "body": "Joy26"
    },
    "Joy27": {
        "prefix": "Joy27",
        "body": "Joy27"
    },
    "Joy28": {
        "prefix": "Joy28",
        "body": "Joy28"
    },
    "Joy29": {
        "prefix": "Joy29",
        "body": "Joy29"
    },
    "Joy30": {
        "prefix": "Joy30",
        "body": "Joy30"
    },
    "Joy31": {
        "prefix": "Joy31",
        "body": "Joy31"
    },
    "Joy32": {
        "prefix": "Joy32",
        "body": "Joy32"
    },
    "JoyX": {
        "prefix": "JoyX",
        "body": "JoyX"
    },
    "JoyY": {
        "prefix": "JoyY",
        "body": "JoyY"
    },
    "JoyZ": {
        "prefix": "JoyZ",
        "body": "JoyZ"
    },
    "JoyR": {
        "prefix": "JoyR",
        "body": "JoyR"
    },
    "JoyU": {
        "prefix": "JoyU",
        "body": "JoyU"
    },
    "JoyV": {
        "prefix": "JoyV",
        "body": "JoyV"
    },
    "JoyPOV": {
        "prefix": "JoyPOV",
        "body": "JoyPOV"
    },
    "JoyName": {
        "prefix": "JoyName",
        "body": "JoyName"
    },
    "JoyButtons": {
        "prefix": "JoyButtons",
        "body": "JoyButtons"
    },
    "JoyAxes": {
        "prefix": "JoyAxes",
        "body": "JoyAxes"
    },
    "JoyInfo": {
        "prefix": "JoyInfo",
        "body": "JoyInfo"
    },
    "Space": {
        "prefix": "Space",
        "body": "Space"
    },
    "Enter": {
        "prefix": "Enter",
        "body": "Enter"
    },
    "Escape": {
        "prefix": "Escape",
        "body": "Escape"
    },
    "Esc": {
        "prefix": "Esc",
        "body": "Esc"
    },
    "BackSpace": {
        "prefix": "BackSpace",
        "body": "BackSpace"
    },
    "BS": {
        "prefix": "BS",
        "body": "BS"
    },
    "Delete": {
        "prefix": "Delete",
        "body": "Delete"
    },
    "Del": {
        "prefix": "Del",
        "body": "Del"
    },
    "Insert": {
        "prefix": "Insert",
        "body": "Insert"
    },
    "Ins": {
        "prefix": "Ins",
        "body": "Ins"
    },
    "PgUp": {
        "prefix": "PgUp",
        "body": "PgUp"
    },
    "PgDn": {
        "prefix": "PgDn",
        "body": "PgDn"
    },
    "Home": {
        "prefix": "Home",
        "body": "Home"
    },
    "End": {
        "prefix": "End",
        "body": "End"
    },
    "Up": {
        "prefix": "Up",
        "body": "Up"
    },
    "Down": {
        "prefix": "Down",
        "body": "Down"
    },
    "Left": {
        "prefix": "Left",
        "body": "Left"
    },
    "Right": {
        "prefix": "Right",
        "body": "Right"
    },
    "PrintScreen": {
        "prefix": "PrintScreen",
        "body": "PrintScreen"
    },
    "CtrlBreak": {
        "prefix": "CtrlBreak",
        "body": "CtrlBreak"
    },
    "ScrollLock": {
        "prefix": "ScrollLock",
        "body": "ScrollLock"
    },
    "CapsLock": {
        "prefix": "CapsLock",
        "body": "CapsLock"
    },
    "NumLock": {
        "prefix": "NumLock",
        "body": "NumLock"
    },
    "Numpad0": {
        "prefix": "Numpad0",
        "body": "Numpad0"
    },
    "Numpad1": {
        "prefix": "Numpad1",
        "body": "Numpad1"
    },
    "Numpad2": {
        "prefix": "Numpad2",
        "body": "Numpad2"
    },
    "Numpad3": {
        "prefix": "Numpad3",
        "body": "Numpad3"
    },
    "Numpad4": {
        "prefix": "Numpad4",
        "body": "Numpad4"
    },
    "Numpad5": {
        "prefix": "Numpad5",
        "body": "Numpad5"
    },
    "Numpad6": {
        "prefix": "Numpad6",
        "body": "Numpad6"
    },
    "Numpad7": {
        "prefix": "Numpad7",
        "body": "Numpad7"
    },
    "Numpad8": {
        "prefix": "Numpad8",
        "body": "Numpad8"
    },
    "Numpad9": {
        "prefix": "Numpad9",
        "body": "Numpad9"
    },
    "NumpadMult": {
        "prefix": "NumpadMult",
        "body": "NumpadMult"
    },
    "NumpadAdd": {
        "prefix": "NumpadAdd",
        "body": "NumpadAdd"
    },
    "NumpadSub": {
        "prefix": "NumpadSub",
        "body": "NumpadSub"
    },
    "NumpadDiv": {
        "prefix": "NumpadDiv",
        "body": "NumpadDiv"
    },
    "NumpadDot": {
        "prefix": "NumpadDot",
        "body": "NumpadDot"
    },
    "NumpadDel": {
        "prefix": "NumpadDel",
        "body": "NumpadDel"
    },
    "NumpadIns": {
        "prefix": "NumpadIns",
        "body": "NumpadIns"
    },
    "NumpadClear": {
        "prefix": "NumpadClear",
        "body": "NumpadClear"
    },
    "NumpadUp": {
        "prefix": "NumpadUp",
        "body": "NumpadUp"
    },
    "NumpadDown": {
        "prefix": "NumpadDown",
        "body": "NumpadDown"
    },
    "NumpadLeft": {
        "prefix": "NumpadLeft",
        "body": "NumpadLeft"
    },
    "NumpadRight": {
        "prefix": "NumpadRight",
        "body": "NumpadRight"
    },
    "NumpadHome": {
        "prefix": "NumpadHome",
        "body": "NumpadHome"
    },
    "NumpadEnd": {
        "prefix": "NumpadEnd",
        "body": "NumpadEnd"
    },
    "NumpadPgup": {
        "prefix": "NumpadPgup",
        "body": "NumpadPgup"
    },
    "NumpadPgdn": {
        "prefix": "NumpadPgdn",
        "body": "NumpadPgdn"
    },
    "NumpadEnter": {
        "prefix": "NumpadEnter",
        "body": "NumpadEnter"
    },
    "F1": {
        "prefix": "F1",
        "body": "F1"
    },
    "F2": {
        "prefix": "F2",
        "body": "F2"
    },
    "F3": {
        "prefix": "F3",
        "body": "F3"
    },
    "F4": {
        "prefix": "F4",
        "body": "F4"
    },
    "F5": {
        "prefix": "F5",
        "body": "F5"
    },
    "F6": {
        "prefix": "F6",
        "body": "F6"
    },
    "F7": {
        "prefix": "F7",
        "body": "F7"
    },
    "F8": {
        "prefix": "F8",
        "body": "F8"
    },
    "F9": {
        "prefix": "F9",
        "body": "F9"
    },
    "F10": {
        "prefix": "F10",
        "body": "F10"
    },
    "F11": {
        "prefix": "F11",
        "body": "F11"
    },
    "F12": {
        "prefix": "F12",
        "body": "F12"
    },
    "F13": {
        "prefix": "F13",
        "body": "F13"
    },
    "F14": {
        "prefix": "F14",
        "body": "F14"
    },
    "F15": {
        "prefix": "F15",
        "body": "F15"
    },
    "F16": {
        "prefix": "F16",
        "body": "F16"
    },
    "F17": {
        "prefix": "F17",
        "body": "F17"
    },
    "F18": {
        "prefix": "F18",
        "body": "F18"
    },
    "F19": {
        "prefix": "F19",
        "body": "F19"
    },
    "F20": {
        "prefix": "F20",
        "body": "F20"
    },
    "F21": {
        "prefix": "F21",
        "body": "F21"
    },
    "F22": {
        "prefix": "F22",
        "body": "F22"
    },
    "F23": {
        "prefix": "F23",
        "body": "F23"
    },
    "F24": {
        "prefix": "F24",
        "body": "F24"
    },
    "Browser_Back": {
        "prefix": "Browser_Back",
        "body": "Browser_Back"
    },
    "Browser_Forward": {
        "prefix": "Browser_Forward",
        "body": "Browser_Forward"
    },
    "Browser_Refresh": {
        "prefix": "Browser_Refresh",
        "body": "Browser_Refresh"
    },
    "Browser_Stop": {
        "prefix": "Browser_Stop",
        "body": "Browser_Stop"
    },
    "Browser_Search": {
        "prefix": "Browser_Search",
        "body": "Browser_Search"
    },
    "Browser_Favorites": {
        "prefix": "Browser_Favorites",
        "body": "Browser_Favorites"
    },
    "Browser_Home": {
        "prefix": "Browser_Home",
        "body": "Browser_Home"
    },
    "Volume_Mute": {
        "prefix": "Volume_Mute",
        "body": "Volume_Mute"
    },
    "Volume_Down": {
        "prefix": "Volume_Down",
        "body": "Volume_Down"
    },
    "Volume_Up": {
        "prefix": "Volume_Up",
        "body": "Volume_Up"
    },
    "Media_Next": {
        "prefix": "Media_Next",
        "body": "Media_Next"
    },
    "Media_Prev": {
        "prefix": "Media_Prev",
        "body": "Media_Prev"
    },
    "Media_Stop": {
        "prefix": "Media_Stop",
        "body": "Media_Stop"
    },
    "Media_Play_Pause": {
        "prefix": "Media_Play_Pause",
        "body": "Media_Play_Pause"
    },
    "Launch_Mail": {
        "prefix": "Launch_Mail",
        "body": "Launch_Mail"
    },
    "Launch_Media": {
        "prefix": "Launch_Media",
        "body": "Launch_Media"
    },
    "Launch_App1": {
        "prefix": "Launch_App1",
        "body": "Launch_App1"
    },
    "Launch_App2": {
        "prefix": "Launch_App2",
        "body": "Launch_App2"
    },
    "Pixel": {
        "prefix": "Pixel",
        "body": "Pixel"
    },
    "Mouse": {
        "prefix": "Mouse",
        "body": "Mouse"
    },
    "Screen": {
        "prefix": "Screen",
        "body": "Screen"
    },
    "Relative": {
        "prefix": "Relative",
        "body": "Relative"
    },
    "RGB": {
        "prefix": "RGB",
        "body": "RGB"
    },
    "LTrim": {
        "prefix": "LTrim",
        "body": "LTrim"
    },
    "RTrim": {
        "prefix": "RTrim",
        "body": "RTrim"
    },
    "Join": {
        "prefix": "Join",
        "body": "Join"
    },
    "Low": {
        "prefix": "Low",
        "body": "Low"
    },
    "BelowNormal": {
        "prefix": "BelowNormal",
        "body": "BelowNormal"
    },
    "Normal": {
        "prefix": "Normal",
        "body": "Normal"
    },
    "AboveNormal": {
        "prefix": "AboveNormal",
        "body": "AboveNormal"
    },
    "High": {
        "prefix": "High",
        "body": "High"
    },
    "Realtime": {
        "prefix": "Realtime",
        "body": "Realtime"
    },
    "ahk_id": {
        "prefix": "ahk_id",
        "body": "ahk_id",
        "description": "Each window or control has a unique ID, also known as a HWND (short for handle to window)."
    },
    "ahk_pid": {
        "prefix": "ahk_pid",
        "body": "ahk_pid",
        "description": "Use ahk_pid to identify a window belonging to a specific process. The process identifier (PID) is typically retrieved by WinGet, Run or Process."
    },
    "ahk_class": {
        "prefix": "ahk_class",
        "body": "ahk_class",
        "description": "A window class is a set of attributes that the system uses as a template to create a window. In other words, the class name of the window identifies what type of window it is. To use a window class, specify ahk_class ExactClassName as shown by Window Spy. ExactClassName can be retrieved by WinGetClass."
    },
    "ahk_group": {
        "prefix": "ahk_group",
        "body": "ahk_group",
        "description": "Use ahk_group to identify a window or windows matching the rules contained by a previously defined window group."
    },
    "ahk_exe": {
        "prefix": "ahk_exe",
        "body": "ahk_exe",
        "description": "Use ahk_exe to identify a window belonging to any process with the given name or path."
    },
    "Between": {
        "prefix": "Between",
        "body": "Between"
    },
    "Contains": {
        "prefix": "Contains",
        "body": "Contains"
    },
    "In": {
        "prefix": "In",
        "body": "In"
    },
    "Is": {
        "prefix": "Is",
        "body": "Is"
    },
    "Integer": {
        "prefix": "Integer",
        "body": "Integer"
    },
    "Float": {
        "prefix": "Float",
        "body": "Float"
    },
    "IntegerFast": {
        "prefix": "IntegerFast",
        "body": "IntegerFast"
    },
    "FloatFast": {
        "prefix": "FloatFast",
        "body": "FloatFast"
    },
    "Number": {
        "prefix": "Number",
        "body": "Number"
    },
    "Digit": {
        "prefix": "Digit",
        "body": "Digit"
    },
    "Xdigit": {
        "prefix": "Xdigit",
        "body": "Xdigit"
    },
    "Alpha": {
        "prefix": "Alpha",
        "body": "Alpha"
    },
    "Upper": {
        "prefix": "Upper",
        "body": "Upper"
    },
    "Lower": {
        "prefix": "Lower",
        "body": "Lower"
    },
    "Alnum": {
        "prefix": "Alnum",
        "body": "Alnum"
    },
    "Time": {
        "prefix": "Time",
        "body": "Time"
    },
    "Date": {
        "prefix": "Date",
        "body": "Date"
    },
    "Not": {
        "prefix": "Not",
        "body": "Not"
    },
    "Or": {
        "prefix": "Or",
        "body": "Or"
    },
    "And": {
        "prefix": "And",
        "body": "And"
    },
    "AlwaysOnTop": {
        "prefix": "AlwaysOnTop",
        "body": "AlwaysOnTop"
    },
    "Topmost": {
        "prefix": "Topmost",
        "body": "Topmost"
    },
    "Top": {
        "prefix": "Top",
        "body": "Top"
    },
    "Bottom": {
        "prefix": "Bottom",
        "body": "Bottom"
    },
    "Transparent": {
        "prefix": "Transparent",
        "body": "Transparent"
    },
    "TransColor": {
        "prefix": "TransColor",
        "body": "TransColor"
    },
    "Redraw": {
        "prefix": "Redraw",
        "body": "Redraw"
    },
    "Region": {
        "prefix": "Region",
        "body": "Region"
    },
    "ID": {
        "prefix": "ID",
        "body": "ID"
    },
    "MinMax": {
        "prefix": "MinMax",
        "body": "MinMax"
    },
    "Count": {
        "prefix": "Count",
        "body": "Count"
    },
    "List": {
        "prefix": "List",
        "body": "List"
    },
    "Lock": {
        "prefix": "Lock",
        "body": "Lock"
    },
    "Unlock": {
        "prefix": "Unlock",
        "body": "Unlock"
    },
    "Label": {
        "prefix": "Label",
        "body": "Label"
    },
    "SetLabel": {
        "prefix": "SetLabel",
        "body": "SetLabel"
    },
    "Type": {
        "prefix": "Type",
        "body": "Type"
    },
    "Status": {
        "prefix": "Status",
        "body": "Status"
    },
    "static": {
        "prefix": "static",
        "body": "static",
        "description": "Static variables are always implicitly local, but differ from locals because their values are remembered between calls."
    },
    "global": {
        "prefix": "global",
        "body": "global",
        "description": "To refer to an existing global variable inside a function (or create a new one), declare the variable as global prior to using it."
    },
    "local": {
        "prefix": "local",
        "body": "local",
        "description": "Local variables are specific to a single function and are visible only inside that function. Consequently, a local variable may have the same name as a global variable and both will have separate contents. Separate functions may also safely use the same variable names."
    },
    "Seconds": {
        "prefix": "Seconds",
        "body": "Seconds"
    },
    "Minutes": {
        "prefix": "Minutes",
        "body": "Minutes"
    },
    "Hours": {
        "prefix": "Hours",
        "body": "Hours"
    },
    "Days": {
        "prefix": "Days",
        "body": "Days"
    },
    "Read": {
        "prefix": "Read",
        "body": "Read"
    },
    "Parse": {
        "prefix": "Parse",
        "body": "Parse"
    },
    "Logoff": {
        "prefix": "Logoff",
        "body": "Logoff"
    },
    "Close": {
        "prefix": "Close",
        "body": "Close"
    },
    "Error": {
        "prefix": "Error",
        "body": "Error"
    },
    "Single": {
        "prefix": "Single",
        "body": "Single"
    },
    "Tray": {
        "prefix": "Tray",
        "body": "Tray"
    },
    "Rename": {
        "prefix": "Rename",
        "body": "Rename"
    },
    "Check": {
        "prefix": "Check",
        "body": "Check"
    },
    "UnCheck": {
        "prefix": "UnCheck",
        "body": "UnCheck"
    },
    "Enable": {
        "prefix": "Enable",
        "body": "Enable"
    },
    "Disable": {
        "prefix": "Disable",
        "body": "Disable"
    },
    "Default": {
        "prefix": "Default",
        "body": "Default"
    },
    "NoDefault": {
        "prefix": "NoDefault",
        "body": "NoDefault"
    },
    "Standard": {
        "prefix": "Standard",
        "body": "Standard"
    },
    "NoStandard": {
        "prefix": "NoStandard",
        "body": "NoStandard"
    },
    "Color": {
        "prefix": "Color",
        "body": "Color"
    },
    "Icon": {
        "prefix": "Icon",
        "body": "Icon"
    },
    "NoIcon": {
        "prefix": "NoIcon",
        "body": "NoIcon"
    },
    "Tip": {
        "prefix": "Tip",
        "body": "Tip"
    },
    "Click": {
        "prefix": "Click",
        "body": "Click"
    },
    "Show": {
        "prefix": "Show",
        "body": "Show"
    },
    "MainWindow": {
        "prefix": "MainWindow",
        "body": "MainWindow"
    },
    "NoMainWindow": {
        "prefix": "NoMainWindow",
        "body": "NoMainWindow"
    },
    "UseErrorLevel": {
        "prefix": "UseErrorLevel",
        "body": "UseErrorLevel"
    },
    "Text": {
        "prefix": "Text",
        "body": "Text"
    },
    "Picture": {
        "prefix": "Picture",
        "body": "Picture"
    },
    "Pic": {
        "prefix": "Pic",
        "body": "Pic"
    },
    "GroupBox": {
        "prefix": "GroupBox",
        "body": "GroupBox"
    },
    "Button": {
        "prefix": "Button",
        "body": "Button"
    },
    "Checkbox": {
        "prefix": "Checkbox",
        "body": "Checkbox"
    },
    "Radio": {
        "prefix": "Radio",
        "body": "Radio"
    },
    "DropDownList": {
        "prefix": "DropDownList",
        "body": "DropDownList"
    },
    "DDL": {
        "prefix": "DDL",
        "body": "DDL"
    },
    "ComboBox": {
        "prefix": "ComboBox",
        "body": "ComboBox"
    },
    "ListBox": {
        "prefix": "ListBox",
        "body": "ListBox"
    },
    "ListView": {
        "prefix": "ListView",
        "body": "ListView"
    },
    "DateTime": {
        "prefix": "DateTime",
        "body": "DateTime"
    },
    "MonthCal": {
        "prefix": "MonthCal",
        "body": "MonthCal"
    },
    "Slider": {
        "prefix": "Slider",
        "body": "Slider"
    },
    "StatusBar": {
        "prefix": "StatusBar",
        "body": "StatusBar"
    },
    "Tab": {
        "prefix": "Tab",
        "body": "Tab"
    },
    "Tab2": {
        "prefix": "Tab2",
        "body": "Tab2"
    },
    "TreeView": {
        "prefix": "TreeView",
        "body": "TreeView"
    },
    "UpDown": {
        "prefix": "UpDown",
        "body": "UpDown"
    },
    "IconSmall": {
        "prefix": "IconSmall",
        "body": "IconSmall"
    },
    "Tile": {
        "prefix": "Tile",
        "body": "Tile"
    },
    "Report": {
        "prefix": "Report",
        "body": "Report"
    },
    "SortDesc": {
        "prefix": "SortDesc",
        "body": "SortDesc"
    },
    "NoSort": {
        "prefix": "NoSort",
        "body": "NoSort"
    },
    "NoSortHdr": {
        "prefix": "NoSortHdr",
        "body": "NoSortHdr"
    },
    "Grid": {
        "prefix": "Grid",
        "body": "Grid"
    },
    "Hdr": {
        "prefix": "Hdr",
        "body": "Hdr"
    },
    "AutoSize": {
        "prefix": "AutoSize",
        "body": "AutoSize"
    },
    "Range": {
        "prefix": "Range",
        "body": "Range"
    },
    "xm": {
        "prefix": "xm",
        "body": "xm"
    },
    "ym": {
        "prefix": "ym",
        "body": "ym"
    },
    "ys": {
        "prefix": "ys",
        "body": "ys"
    },
    "xs": {
        "prefix": "xs",
        "body": "xs"
    },
    "xp": {
        "prefix": "xp",
        "body": "xp"
    },
    "yp": {
        "prefix": "yp",
        "body": "yp"
    },
    "Font": {
        "prefix": "Font",
        "body": "Font"
    },
    "Resize": {
        "prefix": "Resize",
        "body": "Resize"
    },
    "Owner": {
        "prefix": "Owner",
        "body": "Owner"
    },
    "Submit": {
        "prefix": "Submit",
        "body": "Submit"
    },
    "NoHide": {
        "prefix": "NoHide",
        "body": "NoHide"
    },
    "Minimize": {
        "prefix": "Minimize",
        "body": "Minimize"
    },
    "Maximize": {
        "prefix": "Maximize",
        "body": "Maximize"
    },
    "Restore": {
        "prefix": "Restore",
        "body": "Restore"
    },
    "NoActivate": {
        "prefix": "NoActivate",
        "body": "NoActivate"
    },
    "NA": {
        "prefix": "NA",
        "body": "NA"
    },
    "Destroy": {
        "prefix": "Destroy",
        "body": "Destroy"
    },
    "Center": {
        "prefix": "Center",
        "body": "Center"
    },
    "Margin": {
        "prefix": "Margin",
        "body": "Margin"
    },
    "MaxSize": {
        "prefix": "MaxSize",
        "body": "MaxSize"
    },
    "MinSize": {
        "prefix": "MinSize",
        "body": "MinSize"
    },
    "OwnDialogs": {
        "prefix": "OwnDialogs",
        "body": "OwnDialogs"
    },
    "GuiEscape": {
        "prefix": "GuiEscape",
        "body": "GuiEscape"
    },
    "GuiClose": {
        "prefix": "GuiClose",
        "body": "GuiClose"
    },
    "GuiSize": {
        "prefix": "GuiSize",
        "body": "GuiSize"
    },
    "GuiContextMenu": {
        "prefix": "GuiContextMenu",
        "body": "GuiContextMenu"
    },
    "GuiDropFiles": {
        "prefix": "GuiDropFiles",
        "body": "GuiDropFiles"
    },
    "TabStop": {
        "prefix": "TabStop",
        "body": "TabStop"
    },
    "AltSubmit": {
        "prefix": "AltSubmit",
        "body": "AltSubmit"
    },
    "Wrap": {
        "prefix": "Wrap",
        "body": "Wrap"
    },
    "HScroll": {
        "prefix": "HScroll",
        "body": "HScroll"
    },
    "VScroll": {
        "prefix": "VScroll",
        "body": "VScroll"
    },
    "Border": {
        "prefix": "Border",
        "body": "Border"
    },
    "Buttons": {
        "prefix": "Buttons",
        "body": "Buttons"
    },
    "Expand": {
        "prefix": "Expand",
        "body": "Expand"
    },
    "First": {
        "prefix": "First",
        "body": "First"
    },
    "ImageList": {
        "prefix": "ImageList",
        "body": "ImageList"
    },
    "Lines": {
        "prefix": "Lines",
        "body": "Lines"
    },
    "WantCtrlA": {
        "prefix": "WantCtrlA",
        "body": "WantCtrlA"
    },
    "WantF2": {
        "prefix": "WantF2",
        "body": "WantF2"
    },
    "Vis": {
        "prefix": "Vis",
        "body": "Vis"
    },
    "VisFirst": {
        "prefix": "VisFirst",
        "body": "VisFirst"
    },
    "Uppercase": {
        "prefix": "Uppercase",
        "body": "Uppercase"
    },
    "Lowercase": {
        "prefix": "Lowercase",
        "body": "Lowercase"
    },
    "Limit": {
        "prefix": "Limit",
        "body": "Limit"
    },
    "Multi": {
        "prefix": "Multi",
        "body": "Multi"
    },
    "WantReturn": {
        "prefix": "WantReturn",
        "body": "WantReturn"
    },
    "Group": {
        "prefix": "Group",
        "body": "Group"
    },
    "Background": {
        "prefix": "Background",
        "body": "Background"
    },
    "bold": {
        "prefix": "bold",
        "body": "bold"
    },
    "italic": {
        "prefix": "italic",
        "body": "italic"
    },
    "strike": {
        "prefix": "strike",
        "body": "strike"
    },
    "underline": {
        "prefix": "underline",
        "body": "underline"
    },
    "norm": {
        "prefix": "norm",
        "body": "norm"
    },
    "BackgroundTrans": {
        "prefix": "BackgroundTrans",
        "body": "BackgroundTrans"
    },
    "Theme": {
        "prefix": "Theme",
        "body": "Theme"
    },
    "Caption": {
        "prefix": "Caption",
        "body": "Caption"
    },
    "Delimiter": {
        "prefix": "Delimiter",
        "body": "Delimiter"
    },
    "MinimizeBox": {
        "prefix": "MinimizeBox",
        "body": "MinimizeBox"
    },
    "MaximizeBox": {
        "prefix": "MaximizeBox",
        "body": "MaximizeBox"
    },
    "SysMenu": {
        "prefix": "SysMenu",
        "body": "SysMenu"
    },
    "ToolWindow": {
        "prefix": "ToolWindow",
        "body": "ToolWindow"
    },
    "Flash": {
        "prefix": "Flash",
        "body": "Flash"
    },
    "Style": {
        "prefix": "Style",
        "body": "Style"
    },
    "ExStyle": {
        "prefix": "ExStyle",
        "body": "ExStyle"
    },
    "Check3": {
        "prefix": "Check3",
        "body": "Check3"
    },
    "Checked": {
        "prefix": "Checked",
        "body": "Checked"
    },
    "CheckedGray": {
        "prefix": "CheckedGray",
        "body": "CheckedGray"
    },
    "ReadOnly": {
        "prefix": "ReadOnly",
        "body": "ReadOnly"
    },
    "Password": {
        "prefix": "Password",
        "body": "Password"
    },
    "Hidden": {
        "prefix": "Hidden",
        "body": "Hidden"
    },
    "NoTab": {
        "prefix": "NoTab",
        "body": "NoTab"
    },
    "Section": {
        "prefix": "Section",
        "body": "Section"
    },
    "Move": {
        "prefix": "Move",
        "body": "Move"
    },
    "Focus": {
        "prefix": "Focus",
        "body": "Focus"
    },
    "Hide": {
        "prefix": "Hide",
        "body": "Hide"
    },
    "Choose": {
        "prefix": "Choose",
        "body": "Choose"
    },
    "ChooseString": {
        "prefix": "ChooseString",
        "body": "ChooseString"
    },
    "Pos": {
        "prefix": "Pos",
        "body": "Pos"
    },
    "Enabled": {
        "prefix": "Enabled",
        "body": "Enabled"
    },
    "Disabled": {
        "prefix": "Disabled",
        "body": "Disabled"
    },
    "Visible": {
        "prefix": "Visible",
        "body": "Visible"
    },
    "LastFound": {
        "prefix": "LastFound",
        "body": "LastFound"
    },
    "LastFoundExist": {
        "prefix": "LastFoundExist",
        "body": "LastFoundExist"
    },
    "AltTab": {
        "prefix": "AltTab",
        "body": "AltTab"
    },
    "ShiftAltTab": {
        "prefix": "ShiftAltTab",
        "body": "ShiftAltTab"
    },
    "AltTabMenu": {
        "prefix": "AltTabMenu",
        "body": "AltTabMenu"
    },
    "AltTabAndMenu": {
        "prefix": "AltTabAndMenu",
        "body": "AltTabAndMenu"
    },
    "AltTabMenuDismiss": {
        "prefix": "AltTabMenuDismiss",
        "body": "AltTabMenuDismiss"
    },
    "NoTimers": {
        "prefix": "NoTimers",
        "body": "NoTimers"
    },
    "Interrupt": {
        "prefix": "Interrupt",
        "body": "Interrupt"
    },
    "Priority": {
        "prefix": "Priority",
        "body": "Priority"
    },
    "WaitClose": {
        "prefix": "WaitClose",
        "body": "WaitClose"
    },
    "Wait": {
        "prefix": "Wait",
        "body": "Wait"
    },
    "Exist": {
        "prefix": "Exist",
        "body": "Exist"
    },
    "{Blind}": {
        "prefix": "{Blind}",
        "body": "{Blind}"
    },
    "{Click}": {
        "prefix": "{Click}",
        "body": "{Click}"
    },
    "{Raw}": {
        "prefix": "{Raw}",
        "body": "{Raw}"
    },
    "{AltDown}": {
        "prefix": "{AltDown}",
        "body": "{AltDown}"
    },
    "{AltUp}": {
        "prefix": "{AltUp}",
        "body": "{AltUp}"
    },
    "{ShiftDown}": {
        "prefix": "{ShiftDown}",
        "body": "{ShiftDown}"
    },
    "{ShiftUp}": {
        "prefix": "{ShiftUp}",
        "body": "{ShiftUp}"
    },
    "{CtrlDown}": {
        "prefix": "{CtrlDown}",
        "body": "{CtrlDown}"
    },
    "{CtrlUp}": {
        "prefix": "{CtrlUp}",
        "body": "{CtrlUp}"
    },
    "{LWinDown}": {
        "prefix": "{LWinDown}",
        "body": "{LWinDown}"
    },
    "{LWinUp}": {
        "prefix": "{LWinUp}",
        "body": "{LWinUp}"
    },
    "{RWinDown}": {
        "prefix": "{RWinDown}",
        "body": "{RWinDown}"
    },
    "{RWinUp}": {
        "prefix": "{RWinUp}",
        "body": "{RWinUp}"
    },
    "Unicode": {
        "prefix": "Unicode",
        "body": "Unicode"
    },
    "Asc": {
        "prefix": "Asc",
        "body": "Asc"
    },
    "Chr": {
        "prefix": "Chr",
        "body": "Chr"
    },
    "Deref": {
        "prefix": "Deref",
        "body": "Deref"
    },
    "Mod": {
        "prefix": "Mod",
        "body": "Mod"
    },
    "Pow": {
        "prefix": "Pow",
        "body": "Pow"
    },
    "Exp": {
        "prefix": "Exp",
        "body": "Exp"
    },
    "Sqrt": {
        "prefix": "Sqrt",
        "body": "Sqrt"
    },
    "Log": {
        "prefix": "Log",
        "body": "Log"
    },
    "Ln": {
        "prefix": "Ln",
        "body": "Ln"
    },
    "Round": {
        "prefix": "Round",
        "body": "Round"
    },
    "Ceil": {
        "prefix": "Ceil",
        "body": "Ceil"
    },
    "Floor": {
        "prefix": "Floor",
        "body": "Floor"
    },
    "Abs": {
        "prefix": "Abs",
        "body": "Abs"
    },
    "Sin": {
        "prefix": "Sin",
        "body": "Sin"
    },
    "Cos": {
        "prefix": "Cos",
        "body": "Cos"
    },
    "Tan": {
        "prefix": "Tan",
        "body": "Tan"
    },
    "ASin": {
        "prefix": "ASin",
        "body": "ASin"
    },
    "ACos": {
        "prefix": "ACos",
        "body": "ACos"
    },
    "ATan": {
        "prefix": "ATan",
        "body": "ATan"
    },
    "BitNot": {
        "prefix": "BitNot",
        "body": "BitNot"
    },
    "BitAnd": {
        "prefix": "BitAnd",
        "body": "BitAnd"
    },
    "BitOr": {
        "prefix": "BitOr",
        "body": "BitOr"
    },
    "BitXOr": {
        "prefix": "BitXOr",
        "body": "BitXOr"
    },
    "BitShiftLeft": {
        "prefix": "BitShiftLeft",
        "body": "BitShiftLeft"
    },
    "BitShiftRight": {
        "prefix": "BitShiftRight",
        "body": "BitShiftRight"
    },
    "Yes": {
        "prefix": "Yes",
        "body": "Yes"
    },
    "No": {
        "prefix": "No",
        "body": "No"
    },
    "Ok": {
        "prefix": "Ok",
        "body": "Ok"
    },
    "Cancel": {
        "prefix": "Cancel",
        "body": "Cancel"
    },
    "Abort": {
        "prefix": "Abort",
        "body": "Abort"
    },
    "Retry": {
        "prefix": "Retry",
        "body": "Retry"
    },
    "Ignore": {
        "prefix": "Ignore",
        "body": "Ignore"
    },
    "TryAgain": {
        "prefix": "TryAgain",
        "body": "TryAgain"
    },
    "On": {
        "prefix": "On",
        "body": "On"
    },
    "Off": {
        "prefix": "Off",
        "body": "Off"
    },
    "All": {
        "prefix": "All",
        "body": "All"
    },
    "HKEY_LOCAL_MACHINE": {
        "prefix": "HKEY_LOCAL_MACHINE",
        "body": "HKEY_LOCAL_MACHINE"
    },
    "HKEY_USERS": {
        "prefix": "HKEY_USERS",
        "body": "HKEY_USERS"
    },
    "HKEY_CURRENT_USER": {
        "prefix": "HKEY_CURRENT_USER",
        "body": "HKEY_CURRENT_USER"
    },
    "HKEY_CLASSES_ROOT": {
        "prefix": "HKEY_CLASSES_ROOT",
        "body": "HKEY_CLASSES_ROOT"
    },
    "HKEY_CURRENT_CONFIG": {
        "prefix": "HKEY_CURRENT_CONFIG",
        "body": "HKEY_CURRENT_CONFIG"
    },
    "HKLM": {
        "prefix": "HKLM",
        "body": "HKLM"
    },
    "HKU": {
        "prefix": "HKU",
        "body": "HKU"
    },
    "HKCU": {
        "prefix": "HKCU",
        "body": "HKCU"
    },
    "HKCR": {
        "prefix": "HKCR",
        "body": "HKCR"
    },
    "HKCC": {
        "prefix": "HKCC",
        "body": "HKCC"
    },
    "REG_SZ": {
        "prefix": "REG_SZ",
        "body": "REG_SZ"
    },
    "REG_EXPAND_SZ": {
        "prefix": "REG_EXPAND_SZ",
        "body": "REG_EXPAND_SZ"
    },
    "REG_MULTI_SZ": {
        "prefix": "REG_MULTI_SZ",
        "body": "REG_MULTI_SZ"
    },
    "REG_DWORD": {
        "prefix": "REG_DWORD",
        "body": "REG_DWORD"
    },
    "REG_BINARY": {
        "prefix": "REG_BINARY",
        "body": "REG_BINARY"
    },
    "DPIScale": {
        "prefix": "DPIScale",
        "body": "DPIScale"
    },
    "Hwnd": {
        "prefix": "Hwnd",
        "body": "Hwnd"
    },
    "Parent": {
        "prefix": "Parent",
        "body": "Parent"
    }
}
